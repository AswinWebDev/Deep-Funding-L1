timestamp,juror,repo_a,repo_b,parent,choice,multiplier,reasoning
2024-12-24T17:55:51.919Z,L1Juror1,https://github.com/vyperlang/vyper,https://github.com/web3/web3.js,ethereum,2,10.0,"As a first approximation, suppose that the backend (smart contracts) is 2x as valuable as the frontend (JS) of Ethereum. This is an intuitive judgement, on the basis that Ethereum without contracts would be less useful than Ethereum without user interfaces, and contract languages are more challenging to build due to the novel environment (EVM) and harsh security conditions (eg. can't update). Vyper is a high-level language for backend, and web3.js feels analogous to a high-level language for the frontend.

Across Ethereum's history, Vyper seems to be ~4% of Ethereum smart contract usage. https://blockworks.co/news/vyper-ethereum-smart-contract-language

Meanwhile web3.js is a dominant library used in all kinds of frontend applications, though there are now alternatives, particularly ethers.js. Various checks suggest about a 2:1 ratio in usage today, though this is only recent, so I'll assign web3.js a 80% ""market share"".

This implies a 1:20 ratio in market shares, but a 2:1 ratio in value provided, so a total ratio of 1:10 in web3.js's favor."
2024-12-24T18:24:22.611Z,L1Juror1,https://github.com/sigp/lighthouse,https://github.com/paradigmxyz/reth,ethereum,1,6.0,"Lighthouse has 32% of consensus clients, and reth has 2% of execution clients. If we compare their contributions to client diversity, as measured by how much they reduce the HH index, we get:

Consensus status quo: 0.288
Consensus without Lighthouse: 0.402
Execution status quo: 0.341
Execution without reth: 0.355

Contribution ratio: 0.114 / 0.014 = 8.1x

Averaging the two, lighthouse is 12x more impactful.

However, I would argue that execution clients are more challenging to write, the spec is more complex, and it would be harder for ethereum to recover from not having execution clients than not having consensus clients. Hence I give execution clients a 2x multiplier.

So, total 6x to lighthouse."
2024-12-24T18:41:00.539Z,L1Juror1,https://github.com/eth-infinitism/account-abstraction,https://github.com/prysmaticlabs/prysm,ethereum,2,153.0,"All accounts in Ethereum ecosystem:

Arbitrum: 44m
ETH L1: 293m
Optimism: 181m
Polygon: 481m
Total: 1001m

ERC4337 accounts: 730k https://www.alchemy.com/blog/erc-4337-statistics-q3-2023

All transactions:

2.7B on L1: https://blockchair.com/ethereum/charts/total-transaction-count
3.5B on L2 (average of GPT estimate and Perplexity estimate)

ERC4337: 1.6m (same link as above)

Hence, today ERC4337 is about 0.1% of all usage. Account abstraction is very promising in general, but as of today its live usage is roughly at that level.

The features that account abstraction covers (security, gas payments, multi-userops...) are crucial to Ethereum, I would intuitively say 2x more than execution clients. Prysm is 33% of execution client market share, or 28% if we measure by their shares of contribution to client diversity [ie. their marginal impact on the HH index], we'll average to 0.305.

Hence, we compare 0.305 vs 0.001 * 2, and we get a factor of 153x more value provided to-date from Prysm."
2024-12-30T14:46:14.381Z,L1Juror4,https://github.com/grandinetech/grandine,https://github.com/safe-global/safe-smart-account,ethereum,1,2.0,consensys mechanism stability > AA std / app factor 2:1; client diversity boost 2x (pro grandine); licensing/closed source*/copy-pasta-networking-stack malus 0.5x (on grandine)
2024-12-30T19:42:06.928Z,L1Juror4,https://github.com/ethereum/go-ethereum,https://github.com/grandinetech/grandine,ethereum,1,140.0,historic/average market share/usage for el/cl respectively ~70% vs 1%; 2x boost for higher complexity of writing EL + exporting the EVM into every corner of the crypto ecosystem
2024-12-31T10:31:09.191Z,L1Juror5,https://github.com/erigontech/erigon,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,1,1.5,"I feel that Erigon was slightly more influential than EthereumJS. While a lot of the Erigon code was forked from go-ethereum, they made big strides in establishing a flat data format before anyone else. EthereumJS has maintained a lot of libraries that people all over the javascript ecosystem use to interact with ethereum."
2024-12-31T10:40:46.424Z,L1Juror5,https://github.com/erigontech/erigon,https://github.com/vyperlang/vyper,ethereum,1,4.0,Erigon has been significantly more influential than vyper in contributing to the ethereum roadmap. They did light a fire under other execution layer clients which made the whole space more competitive.
2024-12-31T10:41:47.645Z,L1Juror5,https://github.com/safe-global/safe-smart-account,https://github.com/web3/web3.js,ethereum,2,10.0,"While safe has been used significantly, I would say that web3js was significantly more influential since many projects would've never been built if it wasn't for web3js and ethers"
2024-12-31T10:50:02.173Z,L1Juror5,https://github.com/consensys/teku,https://github.com/eth-infinitism/account-abstraction,ethereum,1,3.0,"Without teku there would not be a stable network to built AA on. I think that the AA plan has not yet played out, I hope to see more of them in the future, but so far I don't think that they have had a big impact on the network right now"
2025-01-06T11:21:31.378Z,L1Juror4,https://github.com/status-im/nimbus-eth2,https://github.com/nethermindeth/nethermind,ethereum,2,5.33,average mainnet usage of cl/el ~5% vs ~40% => 8x Nethermind; writing EL harder than CL => 2x boost Nethermind; early stage beacon chain cl diversity boost 3x Nimbus
2025-01-06T11:30:33.486Z,L1Juror4,https://github.com/status-im/nimbus-eth2,https://github.com/argotorg/solidity,ethereum,2,12.5,solidity dominance in EVM languages category boost 5x; Nimbus CL diversity contribution boost 2x; developer attraction / ecosystem flourishing factor 5x (in favor of solidity)
2025-01-06T14:30:40.784Z,L1Juror7,https://github.com/paradigmxyz/reth,https://github.com/ethereum/web3.py,ethereum,1,1.5,Usages
2025-01-08T17:16:07.879Z,L1Juror8,https://github.com/ethereum/go-ethereum,https://github.com/web3/web3.js,ethereum,1,900.0,"its geth, foundational software for ecosystem"
2025-01-08T17:16:40.435Z,L1Juror8,https://github.com/ethereum/py-evm,https://github.com/web3/web3.js,ethereum,2,1.0,I think web3.js has had more direct usage than py-evm but this one is close
2025-01-09T10:16:11.836Z,L1Juror9,https://github.com/chainsafe/lodestar,https://github.com/paradigmxyz/reth,ethereum,2,8.0,"I generally find execution clients more valuable to the community compared to consensus clients, because EC usage is way higher in the developer community: A good EC client can be used as L2 nodes, local testnets, indexer builders, and other EVM toolings.
Reth is especially valuable because it's a very performant node, and currently being used by Conduit to provide as a service for L2s asking for higher gas. The Paradigm team also handles feedback and bug reports very well -- closing tickets within hours or days. I know lots of tooling team that are building with reth nodes, and know how the performance focus really help"
2025-01-09T10:21:55.808Z,L1Juror9,https://github.com/ethereum/go-ethereum,https://github.com/ethereum/remix-project,ethereum,1,20.0,"While Remix was a good starting point for smart contract development in the early days, it's now usually considered outdated and has no advantages compared to other frameworks like Foundry that are much faster, with more resources, documentation and template repositories to learn a more comprehensive way to build smart contracts securely.
Go-Ethereum, on the other hand, is still the most reliable client for all users, developers and infrastructure providers. Even today, it's considered the benchmark and is used to benchmark other clients. Its impact in the EC community remains very important, while Remix has become a tool that people use only once every 2 months in specific cases where they need to read code on someone else's computer, and it's impact in smart contract development sadly disappeared."
2025-01-09T10:31:00.445Z,L1Juror9,https://github.com/prysmaticlabs/prysm,https://github.com/argotorg/solidity,ethereum,2,20.0,"I'd rate Solidity way more valuable than most clients. While Prysm is definitely the most well-known consensus client, compared to Solidity and its contribution to the success of Ethereum, its impact is much smaller. Over 95% of developers write contracts in Solidity - it has shaped how code is written in the EVM and formed a ""monopoly"" on the network. The function call patterns and library patterns were all defined by Solidity, and it has defined the core of how developers think about ""smart contracts"".
Every change Solidity makes has an impact on Ethereum and its usage, both from security and developer experience perspectives."
2025-01-09T10:37:05.043Z,L1Juror9,https://github.com/vyperlang/vyper,https://github.com/chainsafe/lodestar,ethereum,2,6.0,"While Lodestar has low market share, its position as a client implementation is more valuable to the client ecosystem compared to Vyper as a compiler. Vyper itself is a well-designed compiler with better gas performance, but low usage and lack of tooling have made it significantly less popular than Solidity. The Python-like syntax did not attract more developers. Instead, significant bugs caused loss of funds due to poor release processes.
The Vyper compiler has low usage and cannot find enough developers to support its community. It now lags significantly behind the Solidity community, unable to provide meaningful improvements to project development."
2025-01-09T10:44:55.986Z,L1Juror9,https://github.com/prysmaticlabs/prysm,https://github.com/chainsafe/lodestar,ethereum,1,3.0,"Looking at market share and usage, Prysm has way more users compared to Lodestar. However, Lodestar has published many easy-to-use packages like LibP2P and BLS that benefit the broader TypeScript developer community.
TypeScript packages are very important to the ecosystem: most users interact through UIs, which use JavaScript interfaces. These packages from Lodestar significantly lower the barrier for building UIs related to Ethereum consensus information, resulting in wider awareness of staking and client diversification."
2025-01-15T11:34:30.348Z,L1Juror10,https://github.com/eth-infinitism/account-abstraction,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,2,10.0,"These two are fundamentally different so it's harder to compare, but I believe the Typescript implementation of the EVM has been historically more important to the success of Ethereum than the account abstraction EIP implementation above. Maybe moving forward that will change"
2025-01-15T11:47:15.248Z,L1Juror10,https://github.com/safe-global/safe-smart-account,https://github.com/ethereum/go-ethereum,ethereum,2,5.0,"Geth has been the main client and post-merge execution client for a very long time. It's one of the most essential (if not the most) piece of software within Ethereum. Safes are very important, but Geth I believe is more so."
2025-01-15T11:50:23.460Z,L1Juror10,https://github.com/vyperlang/vyper,https://github.com/grandinetech/grandine,ethereum,1,2.0,"Grandine has never been used much as a consensus client, IIRC it was closed source for a while (or only source available). Vyper powers important applications like Curve and Yearn."
2025-01-15T20:36:48.709Z,L1Juror11,https://github.com/paradigmxyz/reth,https://github.com/web3/web3.js,ethereum,1,100.0,"web3js usage low, reth pushing execution layer clients forward & keeping them on their toes"
2025-01-15T20:37:49.203Z,L1Juror11,https://github.com/prysmaticlabs/prysm,https://github.com/sigp/lighthouse,ethereum,1,1.5,prysm just slightly more impactful for its dominance and leadership within the space but both very valuable
2025-01-18T04:39:27.114Z,L1Juror12,https://github.com/sigp/lighthouse,https://github.com/ethereum/py-evm,ethereum,1,3.0,"Lighthouse is in production and the biggest consensus client. py-evm is AFAIUI primarily a developer/research tool. It is definitely useful in terms of allowing people to understand Ethereum and also to rapidly prototype ideas. It is hard to quantify what people would do if py-evm didn't exist, but if it disappeared tomorrow we'd be OK.

Vanity metrics: commits, stars and contributors are all largely irrelevant, but they show some amount of investment in a project. These are roughly 1-2x for Lighthouse. Since Lighthouse is in production I'll give it x3."
2025-01-20T10:05:25.217Z,L1Juror14,https://github.com/ethereum/web3.py,https://github.com/status-im/nimbus-eth2,ethereum,1,2.0,More widely used.
2025-01-20T10:05:36.289Z,L1Juror14,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/status-im/nimbus-eth2,ethereum,1,2.0,More widely used.
2025-01-20T10:07:26.837Z,L1Juror14,https://github.com/web3/web3.js,https://github.com/hyperledger/besu,ethereum,1,2.0,Hard comparison.
2025-01-20T18:38:54.180Z,L1Juror15,https://github.com/foundry-rs/foundry,https://github.com/vyperlang/vyper,ethereum,1,20.0,"Based on my pre-existing knowledge of the ecosystem and the project descriptions, Vyper is constrained to a more focused use case as smart contract compiler, where-as foundry is a broader toolset for building full smart contract projects.  Foundry uses Solidity which has a much broader user base.  Looking at github star and fork metrics lines up with the assessment that Foundry is more important, with fork count suggesting foundry being 2.19x more valuable than vyper and star count suggesting foundry bing 1.73x more valuable than vyper.  Using ""github topics"" (https://github.com/topics/), foundry has 998 repositories vs vyper's 199 repositories, suggesting foundry is 5.01x more valuable.  Looking at the solidity ecosystem, which has 19,411 repositories on github, this further re-inforces foundry being more important.  Diversity of tools is valuable in our ecosystem, however, my personal opinion is that Vyper does not represent healthy diversity as I'm not confident that it would be a responsiible language for a company to build on.  For this reason, I'm choosing to inflate the value of foundry over Vyper above what the github metrics support, given that solidity has 97x the userbase than vyper according to repository count, making foundry a significantly more useful tool for our community."
2025-01-21T19:34:24.572Z,L1Juror15,https://github.com/nethermindeth/nethermind,https://github.com/a16z/helios,ethereum,1,2.5,"These two feel harder to compare. I believe that nethermind wins simply because it represents 34% of the execution nodes running Ethereum and thus is a significant foundational pillar for the protocol.  Helios represents and ideological goal but I don't think it fully delivers it enough to be considered more important than Nethermind. I found it difficult to find any objective measure of how much helios is used for any production use cases. My intuition is that it is probably used very little, as the use of it represents an inherent *risk* or overhead, given that each call it makes requires the front-end to do extra work to verify the data, which for a front-end application means added latency and poor-er UX.  I love that Helios takes an ideological stand towards verified chain data, but I'm not convinced that it meaningfully solves the over-arching problem.  I chose to keep these two relatively close at a 2.5 multiplier as I think more projects like Helios need to be tried and experimented with."
2025-01-21T19:43:16.894Z,L1Juror15,https://github.com/argotorg/fe,https://github.com/apeworx/ape,ethereum,2,5.0,"Ape feels like a clear winner for the reason that it assists in smart contract development and is usable today. In contrast, Fe-lang has been ""promised"" for a long time but seems stuck in a cycle of perpetual development and unable to ship a usable version of their compiler.  Their github says that at present they are in the midst of a full re-write.  This suggests that Fe-lang continuing to exist only effects some possible future in which it turns out to be good and acquires users, where-as Ape is actively improving the ecosystem at the present time."
2025-01-23T00:30:46.482Z,L1Juror16,https://github.com/prysmaticlabs/prysm,https://github.com/erigontech/erigon,ethereum,1,2.0,"Ethereum clients, both EL and CL, live in a space where diversity is extremely important, and I don't think adoption or market share is too useful as a metric, as long as the clients are both robust and viable for common use cases. The value difference in then in what they provide beyond just being stable options for clients. My impression is that the Prysm team have been leaders in broader Ethereum consensus design, on top of client development. Erigon is more known for their technical optimizations and focus on performance, where they have found success and pushed the broader EL space forward. I would value prysm's contributions higher, but not to an extreme extent."
2025-01-23T17:04:09.614Z,L1Juror13,https://github.com/wevm/viem,https://github.com/ethereum-lists/chains,ethereum,2,3.0,"Ethereum-lists/chains acts as the ""plumbing"" of the ecosystem, enabling interoperability at scale, while Viem is a specialized ""tool"" for developers. The former’s universal applicability and role in preventing fragmentation justify its higher multiplier."
2025-01-23T17:05:12.780Z,L1Juror13,https://github.com/paradigmxyz/reth,https://github.com/chainsafe/lodestar,ethereum,1,3.0,"While Lodestar strengthens Ethereum’s consensus layer, Reth’s role in decentralizing the execution layer and enabling next-generation infrastructure makes it disproportionately impactful and its broader applicability to Ethereum’s scalability roadmap."
2025-01-24T02:06:50.875Z,L1Juror13,https://github.com/prysmaticlabs/prysm,https://github.com/nethereum/nethereum,ethereum,1,5.0,"Prysm operates at Ethereum’s protocol layer, ensuring network consensus and security. Nethereum, while valuable, operates at the application layer, enhancing developer experience but not directly sustaining the network"
2025-01-24T02:09:45.517Z,L1Juror13,https://github.com/paradigmxyz/reth,https://github.com/web3/web3.js,ethereum,2,4.0,"Web3.js has been foundational since Ethereum’s early days, enabling millions of developers to build DApps, wallets, and DeFi protocols. Its role in abstracting JSON-RPC complexities directly fueled Ethereum’s ecosystem growth, While Reth focuses on node optimization"
2025-01-24T02:11:47.270Z,L1Juror13,https://github.com/wevm/viem,https://github.com/nethermindeth/nethermind,ethereum,2,4.0,"Execution clients like Nethermind are foundational to Ethereum’s operation. Viem, while valuable, is a tool built atop this infrastructure. Nethermind’s impact on Ethereum’s security and decentralization is disproportionately larger. Viem streamlines development, but Nethermind ensures the network’s survival."
2025-01-24T02:26:02.698Z,L1Juror13,https://github.com/prysmaticlabs/prysm,https://github.com/apeworx/ape,ethereum,1,30.0,"As one of Ethereum's primary consensus clients, Prysm has been critical to the Merge. While Ape enhances developer productivity, its role is supplementary. It streamlines workflows but does not affect Ethereum’s core consensus or network integrity"
2025-01-24T02:34:34.423Z,L1Juror13,https://github.com/wevm/viem,https://github.com/argotorg/sourcify,ethereum,1,5.0,"viem directly accelerates Ethereum development by simplifying complex interactions (e.g., contract calls, transaction signing) with intuitive, type-safe APIs. Sourcify remains indispensable for security but operates in a narrower scope."
2025-01-24T02:39:00.227Z,L1Juror13,https://github.com/a16z/helios,https://github.com/ethereum/remix-project,ethereum,1,3.0,"Helios tackles a fundamental vulnerability in Ethereum’s infrastructure—centralized data providers. While Remix empowers developers, Helios ensures end-user security, a prerequisite for Ethereum’s adoption as a decentralized platform."
2025-01-24T02:46:45.782Z,L1Juror13,https://github.com/ethereum/web3.py,https://github.com/argotorg/fe,ethereum,1,10.0,"web3.py is indispensable for Python developers, enabling Ethereum’s integration into enterprise and open-source ecosystems. Fe’s impact is speculative, as most contracts still use Solidity/Vyper. Fe represents a visionary step toward secure smart contracts, web3.py’s immediate, tangible contributions to Ethereum’s developer ecosystem make it exponentially more impactful."
2025-01-24T02:49:31.868Z,L1Juror13,https://github.com/prysmaticlabs/prysm,https://github.com/ethers-io/ethers.js,ethereum,1,3.0,"Prysm’s contribution is irreplaceable; Ethereum’s PoS consensus cannot function without clients like Prysm. Its codebase directly secures the network and processes billions in staked ETH 1210. Ethers.js, though widely adopted, is one of many tools that streamline development but do not define Ethereum’s core functionality."
2025-01-24T02:54:13.034Z,L1Juror13,https://github.com/erigontech/erigon,https://github.com/eth-infinitism/account-abstraction,ethereum,2,3.0,"ERC-4337 redefines user experience (UX) by eliminating reliance on externally owned accounts (EOAs), addressing critical issues like seed phrase vulnerabilities and gas management.While Erigon advances Ethereum’s infrastructure. The latter’s role in driving adoption and enhancing usability makes it the more pivotal contributor to Ethereum’s success."
2025-01-24T02:55:55.330Z,L1Juror13,https://github.com/consensys/teku,https://github.com/wevm/viem,ethereum,1,4.0,"Teku’s impact is structural, ensuring Ethereum’s core functionality and decentralization. Viem, while valuable, operates at a higher abstraction layer. Its contributions are complementary but not mission-critical; alternatives like ethers.js or web3.js can fulfill similar roles"
2025-01-24T05:37:52.309Z,L1Juror17,https://github.com/web3/web3.js,https://github.com/wevm/viem,ethereum,2,50.0,"Viem’s importance to Ethereum’s ecosystem surpasses Web3.js due to its protocol-aligned innovation, modern developer tooling, and active maintenance, contrasted with Web3.js’s stagnation and deprecation."
2025-01-24T08:19:59.496Z,L1Juror17,https://github.com/apeworx/ape,https://github.com/nethereum/nethereum,ethereum,2,30.0,"Nethereum’s role in securing Ethereum’s .NET ecosystem and enabling enterprise adoption solidifies its 30x greater importance. While Ape enhances developer experience, its impact is peripheral and substitutable, unlike Nethereum’s foundational contributions to Ethereum’s infrastructure."
2025-01-24T09:59:48.916Z,L1Juror17,https://github.com/ethereum-lists/chains,https://github.com/ethereum/web3.py,ethereum,2,10.0,"web3.py is 10x more critical than ethereum-lists/chains due to its irreplaceable role in enabling Python-based Ethereum integration. In contrast, ethereum-lists/chains  streamlines multi-chain configurations but does not directly enable core functionalities. Its maintenance is simpler."
2025-01-24T08:31:17.436Z,L1Juror17,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/argotorg/sourcify,ethereum,1,20.0,"OpenZeppelin Contracts’ irreplaceable role in securing Ethereum’s financial infrastructure solidifies its 20x greater importance. While Sourcify aids transparency, its impact is peripheral compared to OpenZeppelin’s foundational contributions to Ethereum’s security and standardization."
2025-01-24T08:40:51.670Z,L1Juror17,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/nomicfoundation/hardhat,ethereum,2,10.0,"Hardhat’s role as one of the contract development backbones justifies its 10x greater importance over Scaffold-ETH 2, which has so many alternatives available."
2025-01-24T09:54:27.279Z,L1Juror17,https://github.com/ethereum/web3.py,https://github.com/paradigmxyz/reth,ethereum,2,1.0,"Reth and Web3.py are equally important. Considering that Reth has many new features, although its market share is not large, its potential is enormous. And web3.py is crucial for Python ecosystem applications to integrate with Ethereum."
2025-01-24T08:52:51.741Z,L1Juror17,https://github.com/paradigmxyz/reth,https://github.com/prysmaticlabs/prysm,ethereum,2,5.0,"Prysm’s indispensable role in Ethereum’s consensus layer and its broad adoption solidify its primacy. While Reth showcases future potential, its experimental status and limited real-world impact render it secondary to Prysm’s foundational contributions."
2025-01-24T09:07:50.305Z,L1Juror17,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/wevm/viem,ethereum,2,2.0,"Viem’s ecosystem-wide adoption and developer-centric innovation make it twice as vital as EthereumJS Monorepo, which remains confined to protocol research and tooling. The EthereumJS Monorepo is not used in mainstream Ethereum execution layer clients."
2025-01-24T09:25:43.827Z,L1Juror17,https://github.com/ethereum/remix-project,https://github.com/ethers-io/ethers.js,ethereum,2,50.0,"Ethers.js secures Ethereum’s dApp infrastructure, handling $500B+ in DeFi/NFT transactions daily. Remix, while user-friendly, is merely used to onboarding new smart contract developers and rarely used in production level smart contract development."
2025-01-24T09:34:26.792Z,L1Juror17,https://github.com/grandinetech/grandine,https://github.com/vyperlang/titanoboa,ethereum,1,10.0,"Grandine’s foundational role in Ethereum’s consensus layer and client diversity makes it irreplaceable. Titanoboa, while enhancing Vyper’s ecosystem, operates in a replaceable niche with indirect impact. Grandine’s protocol-critical contributions justify its 10x greater importance to Ethereum’s decentralized future."
2025-01-24T09:37:05.355Z,L1Juror17,https://github.com/vyperlang/titanoboa,https://github.com/status-im/nimbus-eth2,ethereum,2,30.0,"Nimbus’s foundational role in Ethereum’s consensus layer and client diversity makes it irreplaceable. Titanoboa, while enhancing Vyper’s ecosystem, operates in a replaceable niche with indirect impact. Grandine’s protocol-critical contributions justify its 30x greater importance to Ethereum’s decentralized future. It is worth mentioning that Nimbus is more important than Grandine for its occupation and minimal resource comsumption."
2025-01-24T10:00:52.111Z,L1Juror17,https://github.com/web3/web3.js,https://github.com/hyperledger-web3j/web3j,ethereum,2,50.0,"Web3j’s foundational role in bridging Java applications to Ethereum’s decentralized future solidifies its 50x greater importance. Focuses on frontend interactions, a niche now dominated by ethers.js and Viem. Web3.js' absence would not disrupt and it has become obsolete due to maintenance neglect and competition."
2025-01-24T16:23:41.681Z,L1Juror15,https://github.com/alloy-rs/alloy,https://github.com/safe-global/safe-smart-account,ethereum,2,1.93,"Looking at github statistics for stars, dependent repositories, and dependent packages, suggests the multipliers of 2.66x, 1.77x, and 1.35x for safe being more valuable than alloy.  My intuition matches this, given that alloy is a lower level developer tool who's audience is constrained mostly to the rust ethereum ecosystem, where-as safe's audience is significantly broader.  The impact of truly secure smart contract wallets and account abstraction feels definitively larger to me."
2025-01-24T17:47:52.759Z,L1Juror18,https://github.com/web3/web3.js,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,1,600.0,Core component to access web as a web2 developer
2025-01-24T17:48:28.198Z,L1Juror18,https://github.com/chainsafe/lodestar,https://github.com/eth-infinitism/account-abstraction,ethereum,1,250.0,A minority CL client. We need more of those
2025-01-24T18:57:44.063Z,L1Juror1,https://github.com/apeworx/ape,https://github.com/nomicfoundation/hardhat,ethereum,2,100.0,"Hardhat is very popular across the entire Ethereum ecosystem; AI estimates give it a market share of 30-70%. Ape has primarily been used by the Bored Ape Yacht Club and related projects, which are a relatively small share of the Ethereum ecosystem: their market cap is about ~150,000 ETH (giving it a share of 0.1% if you include ETH itself, and perhaps a few times more if you do not), and transaction volume is low. DappRadar ranks it as #542 in collectibles ( https://dappradar.com/dapp/bored-ape-yacht-club/nfts?range-ncc=all&range-ncmc=all&range-nc=all ). Adding on top other users beyond BAYC (eg. see a fork by Consensys: https://github.com/Consensys/apeworx-ape ), a ratio of 100 in Hardhat's favor seems reasonable."
2025-01-26T19:04:29.460Z,L1Juror19,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/sigp/lighthouse,ethereum,2,2.0,Comparing two categorically different repositories makes this much more of a value judgement. Ethereumjs has been useful for testing with Hardhat and also doing some more experimental client things. It has never been performant enough to actually run in production. Lighthouse is considered by many to be the standard consensus layer client. The correct functioning of lighthouse is extremely important to the Ethereum network functioning properly.
2025-01-26T21:02:36.396Z,L1Juror19,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/nethermindeth/nethermind,ethereum,2,10.0,Nethermind is a production ready execution client while the ethereumjs execution client is more useful for testing and prototyping. Nethermind is significantly used to secure the live Ethereum network today
2025-01-26T21:03:57.033Z,L1Juror19,https://github.com/grandinetech/grandine,https://github.com/sigp/lighthouse,ethereum,2,100.0,Gandine is much newer to the ecosystem while Lighthouse has been around for quite some time. Lighthouse is one of the more respected consensus layer clients and I know teams that prefer it over the others.
2025-01-28T10:07:42.803Z,L1Juror6,https://github.com/prysmaticlabs/prysm,https://github.com/paradigmxyz/reth,ethereum,1,50.0,Prysm as a majority client is more valuable than Reth which isn't used in production by a significant number of validators/users.
2025-01-28T10:08:55.540Z,L1Juror6,https://github.com/foundry-rs/foundry,https://github.com/sigp/lighthouse,ethereum,2,50.0,"Lighthouse as a majority consensus layer client deserves more credit than foundry, one of the most important libraries. This is because the success of Ethereum, safetywise, heavily depends on the reliability of majority clients."
2025-01-28T10:09:38.905Z,L1Juror6,https://github.com/wevm/viem,https://github.com/ethers-io/ethers.js,ethereum,2,10.0,ethers.js is used by more users and therefore deserves more credits.
2025-01-28T10:10:33.227Z,L1Juror6,https://github.com/ethereum/py-evm,https://github.com/hyperledger/besu,ethereum,2,100.0,Execution layer clients with a significant portion of the network relying on them deserve more credits than the python evm implementation.
2025-01-28T10:11:52.556Z,L1Juror6,https://github.com/grandinetech/grandine,https://github.com/ethereum/web3.py,ethereum,2,20.0,"Although client diversity is very important, as a certain number of clients is reached, every additional one might just slow down progress. While grandine is core-software, namely a CL client, it is not used by a significant number of users while web3.py sees wide-spread usage."
2025-01-28T10:13:25.151Z,L1Juror6,https://github.com/ethereum/go-ethereum,https://github.com/nomicfoundation/hardhat,ethereum,1,100.0,Go-ethereum as a majority EL client that Ethereum heavily relies on deserves more credits than a library used on the application layer because of the fundamental importance of go-ethereum for ethereum's safety.
2025-01-28T10:14:05.617Z,L1Juror6,https://github.com/alloy-rs/alloy,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,2,2.0,The javascript library is more widespread and serves a larger user base.
2025-01-28T12:57:34.368Z,L1Juror20,https://github.com/hyperledger-web3j/web3j,https://github.com/erigontech/erigon,ethereum,2,5.0,erigon is a client vs a JS library
2025-01-28T12:57:50.008Z,L1Juror20,https://github.com/nethermindeth/nethermind,https://github.com/ethereum/web3.py,ethereum,1,5.0,nethermind is a client and that's far harder to do securely compared to web3 py
2025-01-28T12:58:31.466Z,L1Juror20,https://github.com/foundry-rs/foundry,https://github.com/vyperlang/vyper,ethereum,1,10.0,Foundry revolutionized the tooling landscape whereas vyper while novel only moderately improved the work solidity already had done
2025-01-31T16:57:09.599Z,L1Juror21,https://github.com/prysmaticlabs/prysm,https://github.com/consensys/teku,ethereum,1,1.0,"Regardless of adoption, both of these projects do all the same things and deserve as much funding for doing so. I'm rating prysm higher for its adoption but I don't think we need to give it more money."
2025-02-01T07:05:44.888Z,L1Juror22,https://github.com/eth-infinitism/account-abstraction,https://github.com/nomicfoundation/hardhat,ethereum,2,2.0,"It doesn’t seem ERC-4337 has been widely adopted, it is rather a research project which itself has value, but overall, the preference is to the Hardhat"
2025-02-01T12:12:23.719Z,L1Juror23,https://github.com/wevm/viem,https://github.com/apeworx/ape,ethereum,1,2.0,"Js ecosystem is larger in smart contracts. I've heard people using Viem, none using ape."
2025-02-01T12:18:52.280Z,L1Juror23,https://github.com/foundry-rs/foundry,https://github.com/ethers-io/ethers.js,ethereum,2,1.5,"Ethers improved the DX from web3.js. It saved the Ethereum smart contract development at the right time.
Foundry is an improvement in the late game. I'd say the earlier project contributes more to the success of Ethereum"
2025-02-05T21:09:33.085Z,L1Juror15,https://github.com/ethereum/py-evm,https://github.com/ethereum/remix-project,ethereum,2,3.0,"Github data suggests that these two are relatively equal, but my intuition says that Remix is more important by a decent margin.  The recent work on the EEELs python specification makes py-evm a less compelling project.  It is a dependency for eth-tester which itself is a dependency for at least one python-based smart contract development framework... but my understanding of remix is that it is the onramp for a lot of smart contract development and it's actual userbase is larger than the github stars or forks suggest."
2025-02-05T21:17:03.311Z,L1Juror15,https://github.com/status-im/nimbus-eth2,https://github.com/ethereum-lists/chains,ethereum,1,4.0,"Github data would suggest chains to be 16-26x more important, but I think this is massively skewed by this being a cross-chain project.  I would say that constraining to Ethereum as the scope and the nimbus-eth2 wins, though this is arbitrary and not anchored to any specific metric.  nimbus-eth2 seems to account for roughly 5% of the clients in the beacon network as the 3rd most used client.  Knowing the nimbus teams goal of shipping a unified client, I would say that the nimbus-eth2 client's importance is magnified simply in it being meaningfully *different* from the others in it's intended development path."
2025-02-18T08:40:32.267Z,L1Juror22,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/argotorg/fe,ethereum,1,2.0,I am not sure if Fe is highly used today while ethereumjs has a clear application to me. I like the idea of EVM language diversity hence the multiplier isn’t high
2025-02-18T08:42:52.483Z,L1Juror22,https://github.com/argotorg/solidity,https://github.com/a16z/helios,ethereum,1,5.0,I think Solidity is one of a few things made Ethereum successful. Majority of contracts that brought Ethereum’s adoption are written in this language
2025-02-26T06:38:52.886Z,L1Juror25,https://github.com/erigontech/erigon,https://github.com/alloy-rs/alloy,ethereum,2,4.0,"I believe Alloy is four times more valuable to Ethereum’s success than Erigon.

Erigon is just one of the execution clients and holds about a 3% market share. In contrast, Alloy is a Rust library for interacting with Ethereum. Since they’re quite different, let’s compare them from a few angles.

First, consider GitHub stars. As of February 2025, Erigon has 3.3k stars while Alloy has 0.8k stars, meaning Erigon’s count is roughly 4.13 times higher. However, it’s important to remember that GitHub stars accumulate over time, and Erigon is an older project.

Next, on a more subjective level: Erigon, despite its low market share, plays an important role in ensuring diversity among clients. On the other hand, Alloy—being a complete rewrite of ethers‑rs—is becoming the de facto standard for Ethereum interaction libraries in Rust.

I personally believe Rust will be an increasingly important language in the blockchain world due to its excellent performance and growing adoption across many areas. As the importance of Rust engineers rises, so too will the significance of Alloy.

While Erigon may have more GitHub stars, when considering these broader factors, I think Alloy offers four times the value to Ethereum’s success compared to Erigon."
2025-02-26T07:55:32.484Z,L1Juror25,https://github.com/a16z/helios,https://github.com/argotorg/sourcify,ethereum,1,8.0,"I believe that Helios is eight times more valuable to Ethereum's success than Sourcify.

Helios is a light client implementation written in Rust, while Sourcify is a tool for verifying smart contract code. Since these two serve different purposes, they can’t be directly compared, so I’ll compare them from a few perspectives.

First, consider GitHub stars. As of February 2025, Helios has 1.9k stars compared to Sourcify’s 0.8k, making Helios 2.4 times more popular. Additionally, the GitHub API shows that Sourcify was created in April 2019, whereas Helios was launched in August 2022. This means that despite being newer, Helios has managed to gather more stars.

Next, from a more subjective viewpoint: Helios, developed by a16z, supports both Ethereum and OP Stack chains. Increasing the number of users running light clients is crucial for Ethereum’s future because it reduces the need to trust RPC providers and helps promote decentralization. On the other hand, Sourcify’s role in verifying smart contract code is useful in addressing the centralization seen in services like Etherscan, but its overall importance might not be as significant.

For these reasons, I believe that Helios is eight times more valuable than Sourcify."
2025-03-01T06:41:14.049Z,L1Juror9,https://github.com/consensys/teku,https://github.com/argotorg/fe,ethereum,1,20.0,"Teku is a pretty important consensus layer that I know lots of people run, while at the same time, FE is a language with no real usage. Personally, I've never seen or audited any real contracts with FE; their Devcon booth was always empty, proving no real ""devs"" were on board. There's still a long way to go to get FE to the stage where it realistically has an impact in production."
2025-03-01T06:44:08.555Z,L1Juror9,https://github.com/eth-infinitism/account-abstraction,https://github.com/ethereum/py-evm,ethereum,2,10.0,"py-EVM helps many Python development tools to be built, while the AA repository is basically an ""ERC"" implementation. I don't think AA has proven its success yet; the ecosystem is still heavily centralized. The good news is that we do have a roadmap to open that up. That being said, I haven't seen anything uniquely created by the 4337 ERC that relates to Ethereum's success, while py-EVM is a solid dependency"
2025-03-01T23:42:21.523Z,L1Juror19,https://github.com/hyperledger-web3j/web3j,https://github.com/vyperlang/vyper,ethereum,2,10.0,Vyper is a programming language that is known to run in production
2025-03-01T23:42:29.376Z,L1Juror19,https://github.com/argotorg/fe,https://github.com/hyperledger/besu,ethereum,2,100.0,Fe is not in production
2025-03-01T23:42:56.396Z,L1Juror19,https://github.com/argotorg/sourcify,https://github.com/ethereum-lists/chains,ethereum,2,2.0,"I wish that sourcify took off but its not used that much, the canonical list of chains is used"
2025-03-01T23:44:14.589Z,L1Juror19,https://github.com/hyperledger/besu,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,1,1.0,Besu is important for securing the network. They have about the same number of stars and forks on Github
2025-03-01T23:44:41.193Z,L1Juror19,https://github.com/grandinetech/grandine,https://github.com/vyperlang/titanoboa,ethereum,2,10.0,I know of people using titanoboa but do not know anybody using grandine
2025-03-01T23:44:59.458Z,L1Juror19,https://github.com/alloy-rs/alloy,https://github.com/safe-global/safe-smart-account,ethereum,2,100.0,Safe is one of the most important apps in all of ethereum
2025-03-12T02:14:10.413Z,L1Juror26,https://github.com/ethereum-lists/chains,https://github.com/erigontech/erigon,ethereum,1,2.0,"I believe ethereum-lists/chains deserves more recognition than Erigon because, while Erigon contributes to client diversity, ethereum-lists/chains provides unique and valuable information that developers can use for building projects and applications."
2025-03-12T02:18:49.649Z,L1Juror26,https://github.com/a16z/helios,https://github.com/argotorg/solidity,ethereum,1,2.0,"I feel Helios deserves more credit than Solidity because of its practical applications and unique impact on the ecosystem.

While Solidity is essential as the primary smart contract language for Ethereum, it is already well-established and widely recognized. On the other hand, Helios introduces a trustless, efficient, and portable multichain light client, which plays a crucial role in improving Ethereum accessibility and decentralization."
2025-03-25T14:06:10.559Z,L1Juror28,https://github.com/argotorg/sourcify,https://github.com/paradigmxyz/reth,ethereum,2,2.0,"Reth, implemented in Rust for the Ethereum protocol, provides numerous modular features that allow developers to leverage it to build node-related applications such as indexers, MEV-searchers, and more. Although reth's adoption rate is not yet high, as fundamental infrastructure, its future impact remains profound. Sourcify provides contract verification which is quite important, but it functions more as a tool. While it significantly helps the ecosystem, its scope for expansion is limited."
2025-03-25T14:16:21.617Z,L1Juror28,https://github.com/wevm/viem,https://github.com/prysmaticlabs/prysm,ethereum,2,3.0,"It's a bit difficult to choose. Viem is more like an application-layer development tool, while Prysm is a low-level consensus tool. Viem is more widely used, but Prysm requires research and development to maintain and develop in order to maintain the entire Ethereum protocol's consensus. Maintaining consensus is fundamental to Ethereum. Based on the fact that Viem could easily be replaced by other tools in the future (for example, how Viem has replaced ethers.js), I choose Prysm."
2025-03-25T14:21:25.398Z,L1Juror28,https://github.com/wevm/viem,https://github.com/argotorg/sourcify,ethereum,1,3.0,"Viem provides developer-friendly tools that enable rapid development of DApps or applications; Sourcify ensures contract verification security. In comparison, Viem has a greater impact. If Viem becomes compromised, it would affect more projects, whereas contract verification can be supported by other tools and is not necessarily dependent on Sourcify."
2025-03-25T14:26:49.004Z,L1Juror28,https://github.com/eth-infinitism/account-abstraction,https://github.com/erigontech/erigon,ethereum,1,5.0,"Overall, the vision and impact of Account Abstraction (AA) are no less significant than Execution Layer (EL) clients. In order to achieve mass adoption of Ethereum, the establishment of AA standards and direction has an even more far-reaching influence. It enables users to have better control of their assets, reducing dependence on exchanges. At the same time, it provides a better user experience, with account management and recovery features, and even has long-term implications for Decentralized Identity (DID) and privacy."
2025-03-25T14:32:02.363Z,L1Juror28,https://github.com/erigontech/erigon,https://github.com/safe-global/safe-smart-account,ethereum,2,3.0,"From a diversity perspective, while Execution Layer (EL) already has multiple different implementations, there is currently no mainstream reference for Account Abstraction (AA) contract wallet implementations, especially for the ERC-4337 contract implementation. At the system and contract code levels, there are too many constraints and unfriendly aspects. Safe-smart-account, with its accumulated engineering experience, has proposed a contract implementation that does not fully comply with ERC-4337, which serves as a good reference indicator for the current immaturity of AA contract wallets. Even if it does not become a reference standard in the future, the Safe contract is currently an important multi-signature wallet application for contract accounts, with many assets being protected through it."
2025-03-25T14:35:54.681Z,L1Juror28,https://github.com/ethereum/go-ethereum,https://github.com/status-im/nimbus-eth2,ethereum,1,5.0,"geth has been refined over many years, having gone through multiple fork upgrades. In terms of code quality and depth of consensus layer implementation, it has become a crucial learning and reference benchmark for developers. Simultaneously, many of its modules have been extracted to develop more node-related applications."
2025-03-25T14:41:34.935Z,L1Juror28,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/safe-global/safe-smart-account,ethereum,2,2.0,"A difficult choice. Based on the future impact of AA contract accounts, I chose safe-smart-account. However, ethereumjs still has significant influence in terms of JavaScript implementation of the EVM. Yet, because there are implementations in different languages, diversity is ensured. Safe-smart-account is a project that can push Ethereum to its next milestone."
2025-03-25T14:50:28.634Z,L1Juror28,https://github.com/ethers-io/ethers.js,https://github.com/vyperlang/vyper,ethereum,2,1.5,"Vyper is another important contract development language choice besides Solidity, and it became an alternative for security during the peak of DeFi applications. Currently, Solidity remains the mainstream contract language, with Vyper following. However, from a security perspective, Vyper has its unique characteristics. Although ethers.js is more popular among developers, from a foundational perspective, Vyper has its necessary place of existence."
2025-03-25T14:54:38.399Z,L1Juror28,https://github.com/nethereum/nethereum,https://github.com/eth-infinitism/account-abstraction,ethereum,2,3.0,"The standards and vision of Account Abstraction (AA) far exceed protocol libraries, and such tools have implementations in various programming languages."
2025-03-25T15:00:16.947Z,L1Juror28,https://github.com/hyperledger/besu,https://github.com/grandinetech/grandine,ethereum,1,8.0,"As both are clients, Besu is a long-developed project and is particularly beloved by permissioned blockchain enthusiasts. Especially in enterprise and banking sectors, those who prefer developing in Java are fond of the Besu client. Over the past few years, Besu has also adopted various permissioned blockchain consensus algorithms. Based on these factors and considering the adoption rate, I choose the Besu project."
2025-03-26T23:30:44.613Z,L1Juror27,https://github.com/prysmaticlabs/prysm,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,1,5.0,"Prysm is a full Ethereum consensus client focused on implementing the Beacon Chain protocol, widely deployed on the mainnet and directly involved in network consensus.The ethereumjs-monorepo is more of a modular implementation of protocol-level components, suited for research, testing, or lightweight client development, rather than mainnet-level consensus execution.In terms of actual consensus protocol operations, Prysm plays a more critical role"
2025-03-26T23:41:33.621Z,L1Juror27,https://github.com/ethereum/remix-project,https://github.com/vyperlang/vyper,ethereum,1,5.0,"Vyper is a smart contract programming language for Ethereum, with Python-like syntax that emphasizes simplicity, security, and auditability. Remix Project is an officially supported web-based integrated development environment (IDE) for Ethereum, designed specifically for writing, compiling, deploying, and debugging smart contracts. The IDE is more important than the language itself, as there are many alternative languages available."
2025-03-27T20:51:35.521Z,L1Juror27,https://github.com/erigontech/erigon,https://github.com/argotorg/solidity,ethereum,2,3.0,Ethereum's core development language is very important
2025-03-27T20:53:38.383Z,L1Juror27,https://github.com/vyperlang/titanoboa,https://github.com/grandinetech/grandine,ethereum,2,3.0,"Titanoboa is a Python toolkit for testing and simulating Vyper smart contracts. Grandine is a lightweight Ethereum client that directly participates in core functions of the Ethereum network such as consensus, block synchronization, and transaction processing. From the perspective of core functionality and operation of an Ethereum client, Grandine is more critical."
2025-03-27T20:55:15.671Z,L1Juror27,https://github.com/erigontech/erigon,https://github.com/grandinetech/grandine,ethereum,1,10.0,"In terms of market share, Erigon has more credits"
2025-03-27T20:57:28.172Z,L1Juror27,https://github.com/nethereum/nethereum,https://github.com/ethereum/py-evm,ethereum,1,3.0,"Nethereum is a tool geared toward application development, while py-evm is a low-level implementation focused on protocol research; for developers, Nethereum has more credits."
2025-03-27T20:59:37.410Z,L1Juror27,https://github.com/eth-infinitism/account-abstraction,https://github.com/argotorg/sourcify,ethereum,1,5.0,Account Abstraction is one of the key features in Ethereum's core protocol upgrades.
2025-03-27T21:02:02.110Z,L1Juror27,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/status-im/nimbus-eth2,ethereum,2,5.0,Nimbus-eth2 is a lightweight Ethereum consensus client that supports the Ethereum PoS network and is optimized for low-resource devices. It is the only consensus client that supports such devices
2025-03-27T21:02:30.613Z,L1Juror27,https://github.com/ethers-io/ethers.js,https://github.com/vyperlang/vyper,ethereum,1,5.0,more widely used
2025-03-27T21:03:02.436Z,L1Juror27,https://github.com/ethereum/go-ethereum,https://github.com/nomicfoundation/hardhat,ethereum,1,5.0,Core client with a high market share.
2025-03-27T21:03:41.709Z,L1Juror27,https://github.com/foundry-rs/foundry,https://github.com/hyperledger/besu,ethereum,2,5.0,Core client with a high market share.
2025-03-30T04:34:15.896Z,L1Juror24,https://github.com/sigp/lighthouse,https://github.com/nomicfoundation/hardhat,ethereum,2,2.0,"Hardhat has helped hundreds of projects ship their products. Lighthouse on the other hand contributes the security of Ethereum a lot as it is second most popular CL client. Unfortunately if we are talking about contribution to the success of Ethereum, I would pick Hardhat over Lighthouse."
2025-03-30T04:35:54.323Z,L1Juror24,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/eth-infinitism/account-abstraction,ethereum,2,900.0,account-abstraction lays the foundation for wallets which in turn impacts millions of users while scaffold-eth-2 helps new devs to onboard more quickly.
2025-03-30T04:39:25.461Z,L1Juror24,https://github.com/argotorg/sourcify,https://github.com/safe-global/safe-smart-account,ethereum,2,500.0,"Safe has contributed a lot to the development of smart contract wallet and it helps secure billions of dollars of assets. Without it, we will probably hear more hacks due to private key or mnemonic words theft. Sourcify contributes to the security of smart contract explorer but it's rather new and small compared to Etherscan."
2025-03-30T04:41:47.364Z,L1Juror24,https://github.com/nethermindeth/nethermind,https://github.com/prysmaticlabs/prysm,ethereum,2,1.2,"Prysm is the most popular CL client while Nethermind is the second most popular EL client. However since EL impacts a lot more users than CL, I would reduce the multiplier from 3 to 1.2."
2025-03-30T04:55:33.520Z,L1Juror24,https://github.com/eth-infinitism/account-abstraction,https://github.com/vyperlang/vyper,ethereum,1,100.0,account-abstraction lays the foundation for wallets which in turn impacts millions of users while vyper helps many projects build their smart contracts with Python.
2025-03-30T04:58:38.188Z,L1Juror24,https://github.com/ethereum-lists/chains,https://github.com/erigontech/erigon,ethereum,2,20.0,"chains list is usefule for some explorers, wallets or DApps but it is not a necessity to the ecosystem while Erigon serves as a EL client, contributing to the security of Ethereum and has ported many improvements back to go-ethereum"
2025-03-30T05:00:36.548Z,L1Juror24,https://github.com/argotorg/solidity,https://github.com/prysmaticlabs/prysm,ethereum,1,5.0,"Solidity is too crucial to Ethereum. Without it, there won't be any projects built on Ethereum. However Prysm is the largest CL client so without it CL would be more vulnerable."
2025-03-30T05:03:18.533Z,L1Juror24,https://github.com/chainsafe/lodestar,https://github.com/foundry-rs/foundry,ethereum,2,50.0,"Foundry has helped hundreds of projects shipped their products while Lodestar contributes to the security of Ethereum. However, if we are talking about contribution to the success of Ethereum, I will give Foundry much more credits."
2025-03-30T05:08:10.790Z,L1Juror24,https://github.com/paradigmxyz/reth,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,1.5,"openzeppelin contracts have saves smart contract devs so much time on writing libraries, especially safe ones. Without them, there will not be so many projects and many of them will get hacked. On the other hand, reth is quickly rising as a performant new client and the team has done some important research on the limits of current Ethereum/EVM. reth is also being used by many teams building many different tools, e.g., MEV tools, simulation tools ,indexers etc.

I will choose openzeppelin contracts over reth because reth is rather new but due to it's potential impact on the infrastructure of the ecosystem, I pick a small multiplier."
2025-03-30T05:11:54.891Z,L1Juror24,https://github.com/ethereum/go-ethereum,https://github.com/foundry-rs/foundry,ethereum,1,5.0,"go-ethereum is the most popular EL client while foundry is the most popular smart contract dev tool. Without go-ethereum, Ethereum will suffer from more attacks and malicious hardforks, that's why I pick go-ethereum over foundry. There is also good replacement for foundry like Hardhat."
2025-03-30T21:06:39.426Z,L1Juror29,https://github.com/eth-infinitism/account-abstraction,https://github.com/ethereum/remix-project,ethereum,2,5.0,Remix is a foundational tool.
2025-03-30T21:07:19.909Z,L1Juror29,https://github.com/argotorg/fe,https://github.com/vyperlang/titanoboa,ethereum,2,3.0,"While Fe introduces a promising new language for smart contract development, its current adoption and impact are limited. In contrast, Titanoboa provides immediate, practical benefits by enhancing the development experience for existing Vyper users, thereby contributing more significantly to the current Ethereum development ecosystem."
2025-03-30T21:08:25.335Z,L1Juror29,https://github.com/nomicfoundation/hardhat,https://github.com/foundry-rs/foundry,ethereum,1,2.0,"Hardhat came first, even if foundry is much better."
2025-03-30T21:09:38.799Z,L1Juror29,https://github.com/safe-global/safe-smart-account,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,1,99.0,"Safe smart wallets are a critical component for a wide range of users, including individuals, DAOs, and enterprises. Scaffold has many alternatives."
2025-03-30T21:10:00.386Z,L1Juror29,https://github.com/safe-global/safe-smart-account,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,1,99.0,"Safe smart wallets are a critical component for a wide range of users, including individuals, DAOs, and enterprises. Scaffold has many alternatives."
2025-03-30T21:11:38.472Z,L1Juror29,https://github.com/consensys/teku,https://github.com/a16z/helios,ethereum,1,3.0,"Teku serves as a critical component in Ethereum’s consensus mechanism, directly impacting network security and decentralization, especially for institutional participants. In contrast, Helios provides valuable, trustless access to Ethereum for users seeking lightweight solutions, but its role is more supplementary compared to the foundational importance of a consensus client like Teku."
2025-03-30T21:12:29.741Z,L1Juror29,https://github.com/alloy-rs/alloy,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,10.0,"OpenZeppelin Contracts serves as a critical foundation for secure and standardized smart contract development across the Ethereum ecosystem, with widespread adoption and dependency. In contrast, while Alloy provides valuable tools for Rust developers interacting with Ethereum, its impact and adoption are more specialized and limited in scope."
2025-03-30T21:13:30.250Z,L1Juror29,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethereum/py-evm,ethereum,1,3.0,"Scaffold-ETH 2 provides a comprehensive and integrated development environment that accelerates the creation and deployment of decentralized applications, directly impacting the growth and innovation within the Ethereum ecosystem. In contrast, Py-EVM serves a more specialized role, offering a Python-based implementation of the Ethereum Virtual Machine primarily for research and protocol development purposes."
2025-03-30T21:15:03.188Z,L1Juror29,https://github.com/apeworx/ape,https://github.com/ethereum-lists/chains,ethereum,2,2.0,"While Ape enhances the development experience for creating and interacting with smart contracts, the ethereum-lists/chains repository is an authoritative source of chain information, replacing this repository would require significant effort in data collection and maintenance."
2025-03-30T21:15:50.274Z,L1Juror29,https://github.com/prysmaticlabs/prysm,https://github.com/vyperlang/titanoboa,ethereum,1,5.0,"Prysm serves as a critical component in Ethereum’s consensus mechanism, directly impacting network security and decentralization. In contrast, Titanoboa provides valuable tools for Vyper developers, enhancing smart contract development and testing, but its impact is more specialized within the developer community."
2025-03-31T15:00:41.097Z,L1Juror30,https://github.com/hyperledger/besu,https://github.com/a16z/helios,ethereum,1,3.0,"They are both clients in ETH community.
However, I think the full-node client might be more important than the light-node client.
As for full-nodes, they are the basic security layer of the network. Without a diverse full-node network, a light-node is unsafe. 
As for full-node client, Besu contributes to the diversity of the network, although it might not be so much widely used.

Hence, I chose it might have 3 times importance than helios."
2025-03-31T16:29:03.052Z,L1Juror30,https://github.com/apeworx/ape,https://github.com/grandinetech/grandine,ethereum,2,2.0,"The grandine is a CL client. Among several CL clients, although grandine might not be the most popular, it is mentioned in the ethereum.org web page.

As for apeworx, I am not very familiar with it. 

I think the CL client is the basis of the network. And the diversity of the CL client is very important. Therefore, I choose 2 times."
2025-05-26T10:19:40.441Z,L1Juror37,https://github.com/prysmaticlabs/prysm,https://github.com/foundry-rs/foundry,ethereum,2,400.0,It is more popular
2025-05-26T10:43:13.122Z,L1Juror5,https://github.com/erigontech/erigon,https://github.com/hyperledger-web3j/web3j,ethereum,1,5.0,"Erigon while a fork of go-ethereum has innovated on the storage layout of ethereum nodes while web3j packages a bunch of ethereum libraries in java, which is not a much used language in the crypto space anymore"
2025-05-26T10:44:38.046Z,L1Juror5,https://github.com/wevm/viem,https://github.com/sigp/lighthouse,ethereum,2,50.0,"Viem allows you to interact with ethereum nodes in typescript, but it brings not much more to the table than ethers, web3.js and other libraries while lighthouse is the most advanced CL client"
2025-05-26T10:45:14.507Z,L1Juror5,https://github.com/argotorg/fe,https://github.com/alloy-rs/alloy,ethereum,2,3.0,Alloy has been very good at bringing real value to the users over just establishing a cool concept
2025-05-26T11:48:56.755Z,L1Juror12,https://github.com/eth-infinitism/account-abstraction,https://github.com/hyperledger/besu,ethereum,1,1.5,"Besu is a key consensus client, especially for enterprise customers

Account abstraction is a key abstraction for good UX on Ethereum, and this repo gathers a lot of key tools related to it

If both disappeared tomorrow I think we'd feel account-abstraction loss a bit more acutely, since there are other options for consensus clients

But account abstraction is also a protocol

So confidence low, 1.5x"
2025-05-26T11:50:32.147Z,L1Juror12,https://github.com/argotorg/fe,https://github.com/chainsafe/lodestar,ethereum,2,3.0,"Fe is cool but I haven't personally seen a lot of real world usage (might be ignorance)

Lodestar is unique in being able to target web environments (e.g. IIRC it was key for key generation etc at merge)"
2025-05-26T11:52:22.273Z,L1Juror12,https://github.com/eth-infinitism/account-abstraction,https://github.com/status-im/nimbus-eth2,ethereum,1,1.0,"Similar reasoning to before, but Nimbus is a bit unique in its focus on minimizing dependencies etc

A bit contradictory but find it difficult to choose, slight edge to AA maybe"
2025-05-26T14:32:19.368Z,L1Juror32,https://github.com/hyperledger-web3j/web3j,https://github.com/ethers-io/ethers.js,ethereum,2,100.0,"Although they are both classified in the same category as libraries, ethers is far more well known and has a greater track record of implementation than web3j. It also has a positive impact in terms of versatility due to supported languages and derived implementations such as ethers-rs."
2025-05-30T15:15:03.718Z,L1Juror20,https://github.com/alloy-rs/alloy,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,1,100.0,Alloy is used in a lot of dependency projects and is considered very production ready code.
2025-05-30T15:16:38.822Z,L1Juror20,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/chainsafe/lodestar,ethereum,2,3.0,more people use lodestar in comparison to ethereumJS
2025-06-01T07:21:30.043Z,L1Juror4,https://github.com/ethereum/remix-project,https://github.com/sigp/lighthouse,ethereum,2,15.0,"Lighthouse secures 1/3 of Ethereum PoS, setting the basis for a successful application layer ecosystem which remix may serve devs with to build on top of"
2025-06-01T07:28:20.559Z,L1Juror4,https://github.com/hyperledger/besu,https://github.com/sigp/lighthouse,ethereum,2,12.0,Lighthouse has 6x the share of validators using it compared to Besu. It's served a pivotal role to reduce prysm's CL supermarjority in the early days of the beacon chain (+2x).
2025-06-01T07:29:44.572Z,L1Juror4,https://github.com/vyperlang/vyper,https://github.com/ethereum/go-ethereum,ethereum,2,100.0,Geth has been Ethereum's execution backbone for a decade. Vyper adoption is clearly lacking behind solidity
2025-06-06T22:47:41.496Z,L1Juror31,https://github.com/vyperlang/vyper,https://github.com/sigp/lighthouse,ethereum,2,5.0,"Lighthouse is a leading example of consensus client implementations. Vyper is cool, but I haven't felt the need to switch off of other contract languages"
2025-09-05T14:39:43.998Z,L1Juror35,https://github.com/ethereum/web3.py,https://github.com/prysmaticlabs/prysm,ethereum,1,2.0,"web3py has been essential for backends, bots, and general web3 adoption among python community"
2025-09-05T14:52:06.672Z,L1Juror35,https://github.com/prysmaticlabs/prysm,https://github.com/ethereum/remix-project,ethereum,1,5.0,"Prysm is a major client, there are many other options for IDEs"
2025-09-05T14:52:40.392Z,L1Juror35,https://github.com/paradigmxyz/reth,https://github.com/ethereum/go-ethereum,ethereum,2,50.0,reth is nice and good tech and important for client diversity but geth is the goat
2025-09-05T19:45:55.174Z,L1Juror36,https://github.com/nethereum/nethereum,https://github.com/chainsafe/lodestar,ethereum,1,2.0,"Netheruem is a very popular execution client,and has helped deliver many libraries for the dot net ecosystem"
2025-09-06T17:55:58.166Z,L1Juror14,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/nethereum/nethereum,ethereum,1,10.0,way more used
2025-09-06T17:59:48.527Z,L1Juror14,https://github.com/eth-infinitism/account-abstraction,https://github.com/status-im/nimbus-eth2,ethereum,1,5.0,our roadmap to better wallets
2025-09-06T18:04:28.205Z,L1Juror14,https://github.com/argotorg/fe,https://github.com/nethermindeth/nethermind,ethereum,2,3.0,ships more
2025-09-08T11:32:49.247Z,L1Juror38,https://github.com/ethereum-lists/chains,https://github.com/a16z/helios,ethereum,1,4.0,Improve chains visibility.
2025-09-08T11:34:18.087Z,L1Juror38,https://github.com/ethereum/go-ethereum,https://github.com/ethereum-lists/chains,ethereum,1,5.0,geth is the most used client.
2025-09-08T11:35:05.077Z,L1Juror38,https://github.com/consensys/teku,https://github.com/argotorg/sourcify,ethereum,1,4.0,For client diversity.
2025-09-08T11:35:42.604Z,L1Juror38,https://github.com/chainsafe/lodestar,https://github.com/ethereum/eips,ethereum,1,5.0,client diversity.
2025-09-08T11:36:15.696Z,L1Juror38,https://github.com/a16z/helios,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,5.0,contract libraries need to expand and get support.
2025-09-09T20:29:06.289Z,L1Juror21,https://github.com/paradigmxyz/reth,https://github.com/erigontech/erigon,ethereum,2,1.0,"Similar in class, similar in adoption. I'd rather have both than 1 so let's make sure they are each adequately funded."
2025-09-09T20:39:07.918Z,L1Juror21,https://github.com/wevm/viem,https://github.com/consensys/teku,ethereum,2,10.0,"I'd give a programming language like Solidity a 1:2 rating against a consensus client by category. As a category of functionality this has to be lower rated than an EVM programming language. It's significantly less complicated, it's only one programming language so it has less impact, etc."
2025-09-10T02:12:05.585Z,L1Juror11,https://github.com/chainsafe/lodestar,https://github.com/nethereum/nethereum,ethereum,1,500.0,core protocol
2025-09-10T02:12:47.117Z,L1Juror11,https://github.com/ethereum/py-evm,https://github.com/sigp/lighthouse,ethereum,2,200.0,consensus client software
2025-09-10T02:13:13.461Z,L1Juror11,https://github.com/chainsafe/lodestar,https://github.com/alloy-rs/alloy,ethereum,1,500.0,core protocol
2024-12-31T10:54:20.684Z,L1Juror5,https://github.com/ethereum/remix-project,https://github.com/paradigmxyz/reth,ethereum,1,1.5,"Both projects feel very similar in impact, while Reth has lit a fire under other execution clients, I feel that remix has been very instrumental in bringing in new people into the ecosystem. Almost every smart contract developer that I talked to has started out building small things on remix before building with better tools, its a great platform for prototyping"
2024-12-31T10:56:05.764Z,L1Juror5,https://github.com/prysmaticlabs/prysm,https://github.com/ethereum/go-ethereum,ethereum,2,4.0,"Very hard comparison. Prysm has been instrumental in the early days of the beacon chain, but I feel that they are not driving the network forward as much as go-ethereum has been doing. Go-ethereum also has been supporting the network for ~3 times as long as prysm"
2024-12-31T10:57:40.797Z,L1Juror5,https://github.com/status-im/nimbus-eth2,https://github.com/erigontech/erigon,ethereum,1,1.1,"I feel like both are very similar in their contributions to ethereum, but the nimbus team is more involved in all of the core development conversation while erigon is following the progress with very little input on their side"
2024-12-31T10:59:59.274Z,L1Juror5,https://github.com/status-im/nimbus-eth2,https://github.com/paradigmxyz/reth,ethereum,2,1.1,"Both are very close to each other in orders of impact imo, but I feel like reth has been pushing a lot recently, while nimbus has stopped contributing as much to the discussions."
2025-01-06T11:39:57.877Z,L1Juror4,https://github.com/prysmaticlabs/prysm,https://github.com/status-im/nimbus-eth2,ethereum,1,1.1,mainnet usage ~33% vs 5% in favor of prysm; CL diversity contribution boost for nimbus 3x; 2x boost for Nimbus for having remained independent
2025-01-06T11:48:38.625Z,L1Juror4,https://github.com/chainsafe/lodestar,https://github.com/paradigmxyz/reth,ethereum,1,1.5,Mainnet usage rate ~2% Lodestar vs ~4% Reth; Writing EL harder than CL boost for Reth 2x; Lodestar CL client diversity boost 3x; Reth ACD/Governance capture risk contribution malus 0.5x
2025-01-06T11:59:57.694Z,L1Juror4,https://github.com/erigontech/erigon,https://github.com/eth-infinitism/account-abstraction,ethereum,1,6.0,"EL clients somewhat enable AA frameworks in the first place, have much bigger scope and weight to lift for Ethereum as a whole (3x boost). Moreover, Erigon significantly contributed to DB innovations (2x). AA historically could not have contributed to the success of Ethereum in an equal fashion."
2025-01-06T14:31:02.748Z,L1Juror7,https://github.com/ethereum/go-ethereum,https://github.com/sigp/lighthouse,ethereum,1,1.0,The same. CL vs EL
2025-01-06T14:31:20.921Z,L1Juror7,https://github.com/chainsafe/lodestar,https://github.com/consensys/teku,ethereum,2,1.5,usages
2025-01-08T17:17:07.362Z,L1Juror8,https://github.com/ethereum/py-evm,https://github.com/safe-global/safe-smart-account,ethereum,2,500.0,"safe is widely used in ecosystem, secures lots of $$$"
2025-01-08T17:17:32.528Z,L1Juror8,https://github.com/grandinetech/grandine,https://github.com/eth-infinitism/account-abstraction,ethereum,2,300.0,grandine is quite early on their client journey; AA has had a lot more usage to date
2025-01-15T11:19:51.121Z,L1Juror10,https://github.com/erigontech/erigon,https://github.com/ethereum/web3.py,ethereum,1,50.0,"A performant and robust execution client implementation is key for the multi-client ethos of Ethereum. A key part to decentralization and a much harder thing to implement/maintain. web3.py is great, but there are a lot less moving pieces and it requires way fewer people to maintain."
2025-01-15T11:22:16.292Z,L1Juror10,https://github.com/prysmaticlabs/prysm,https://github.com/hyperledger/besu,ethereum,1,3.0,"Prysm has shouldered the burden of the majority consensus client on Ethereum for a very long time. If something happened with Prysm during that time, the network would have definitely had issues during previous times. They have done awesome work. Besu is great too, but this is the reason I gave a multiplier to prysm."
2025-01-15T11:24:06.402Z,L1Juror10,https://github.com/safe-global/safe-smart-account,https://github.com/paradigmxyz/reth,ethereum,1,1.5,"This is a tricky one! Safes secure a ton of value on Ethereum and have been of the reasons that institutions and capital have been able to securely thrive on network over time. reth has lived for a shorter amount of time, but has done lots of great work and is poised to become an important execution client moving forward."
2025-01-15T11:25:53.213Z,L1Juror10,https://github.com/vyperlang/vyper,https://github.com/ethereum/go-ethereum,ethereum,2,10.0,"Geth is an essential piece of infrastructure for the Ethereum ecosystem and has been the main client almost since inception. They have also shouldered the majority execution client burden since the merge. Vyper is an important tool as well, but it's not as much used as Solidity and so I believe that Geth is significantly more valuable."
2025-01-15T20:40:34.675Z,L1Juror11,https://github.com/hyperledger/besu,https://github.com/grandinetech/grandine,ethereum,1,50.0,"besu for its larger dominance, context within consensys, collaboration with teku"
2025-01-15T20:42:56.210Z,L1Juror11,https://github.com/erigontech/erigon,https://github.com/sigp/lighthouse,ethereum,2,5.0,lighthouse for its collaboration across and good relationships with other consensus layer (and execution layer) clients. erigon is valuable for its archive nodes and non-validating node prevalence
2025-01-15T20:43:45.271Z,L1Juror11,https://github.com/grandinetech/grandine,https://github.com/argotorg/solidity,ethereum,2,40.0,solidity touches far more of the stack and doesn't have as many (or any) equivalents as grandine does
2025-01-20T10:07:56.392Z,L1Juror14,https://github.com/argotorg/solidity,https://github.com/nethermindeth/nethermind,ethereum,1,10.0,Solidity is the moat of Ethereum.
2025-01-20T10:08:50.289Z,L1Juror14,https://github.com/paradigmxyz/reth,https://github.com/argotorg/solidity,ethereum,2,10.0,Solidity is the moat of Ethereum DevX. Reth might grow in usefulness in scaling OP stack in the upcoming years.
2025-01-20T10:09:14.587Z,L1Juror14,https://github.com/status-im/nimbus-eth2,https://github.com/argotorg/solidity,ethereum,2,10.0,Solidity has no substitutes.
2025-01-20T10:09:40.295Z,L1Juror14,https://github.com/web3/web3.js,https://github.com/ethereum/remix-project,ethereum,2,3.0,Remix is still very relevant till today.
2025-01-23T00:54:40.483Z,L1Juror16,https://github.com/safe-global/safe-smart-account,https://github.com/a16z/helios,ethereum,1,20.0,"This is quite a disparate comparison. Safe is prominent as the leading multisig platform, and its success so far provides value for its users as well as the broader reputation of Ethereum as a whole as a secure place to store high-value assets. As for Helios, I am having difficulty finding statistics around real-world usage, even for the broader light client space as a whole. Ethereum today is not particularly light-client-friendly, and it may be difficult for modern light clients to provide much value, through no fault of their own. Nevertheless, Safe seems to have provided much more tangible benefit to Ethereum as a whole as of now, though that number is difficult to quantify."
2025-01-23T14:54:25.432Z,L1Juror13,https://github.com/web3/web3.js,https://github.com/a16z/helios,ethereum,1,5.0,"web3.js has been integral since Ethereum’s inception (2015), enabling developers to build DApps, interact with smart contracts, and manage wallets. Its APIs became the de facto standard for Ethereum JavaScript development, powering critical infrastructure like MetaMask and Truffle, while Helios addresses a specific trust vector."
2025-01-23T15:26:15.490Z,L1Juror13,https://github.com/chainsafe/lodestar,https://github.com/safe-global/safe-smart-account,ethereum,1,8.0,"Lodestar is a core component of Ethereum’s consensus layer, which is indispensable for network security and scalability. While Safe is a smart contract-based wallet framework designed for AA, enabling features like multi-signature security, customizable transaction guards, and modular extensions. Lodestar’s contribution to consensus mechanism is foundational and non-negotiable. Safe Smart Account, while transformative for user adoption, builds atop this infrastructure."
2025-01-23T16:02:52.540Z,L1Juror13,https://github.com/paradigmxyz/reth,https://github.com/vyperlang/vyper,ethereum,1,3.0,"Reth contributes to Ethereum’s infrastructure scalability and L2 adoption. Its performance optimizations directly address Ethereum’s gas throughput limitations, enabling cheaper and faster transactions. Vyper strengthens Ethereum’s security foundation by reducing smart contract exploits, fostering trust in decentralized applications."
2025-01-23T16:11:48.029Z,L1Juror13,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/nethermindeth/nethermind,ethereum,2,5.0,"Execution clients like Nethermind are essential for Ethereum’s day-to-day operations. Nethermind’s adoption reduces reliance on Geth, mitigating single-point-of-failure risks. While EthereumJS enables developer innovation."
2025-01-23T16:29:20.907Z,L1Juror13,https://github.com/status-im/nimbus-eth2,https://github.com/erigontech/erigon,ethereum,2,1.5,"Erigon revolutionized execution-layer scalability by drastically reducing node sync times and storage demands. By making full nodes accessible to more operators, it strengthened Ethereum’s execution-layer security and reliability, Nimbus directly enabled Ethereum’s transition to PoS by providing a resource-efficient consensus client, Both projects are essential, but Erigon’s execution-layer optimizations have a broader, more foundational impact on Ethereum’s functionality and adoption."
2025-01-23T16:33:06.018Z,L1Juror13,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/paradigmxyz/reth,ethereum,2,4.0,"Reth is a high-performance Ethereum execution client written in Rust, designed to improve network infrastructure. While Scaffold-ETH-2 is a developer toolkit focused on simplifying dApp development on Ethereum. Reth’s role in securing Ethereum’s base layer provides disproportionately higher value."
2025-01-23T16:38:52.720Z,L1Juror13,https://github.com/argotorg/fe,https://github.com/hyperledger-web3j/web3j,ethereum,2,5.0,"Fe is a statically typed, Rust-inspired smart contract language designed for Ethereum.  Web3j is a Java/Android library for interacting with Ethereum nodes and smart contracts. Web3j has immediate impact on Ethereum’s developer, which has enabled thousands of projects since 2016, whereas Fe’s contributions are still emerging"
2025-01-23T16:42:20.093Z,L1Juror13,https://github.com/ethers-io/ethers.js,https://github.com/nomicfoundation/hardhat,ethereum,1,3.0,"Ethers.js serves as an essential foundation, while Hardhat acts as a productivity booster. Though Hardhat speeds up development, Ethers.js fundamentally enables the process. For each project utilizing Hardhat, numerous others depend purely on Ethers.js for vital functions."
2025-01-23T16:55:00.152Z,L1Juror13,https://github.com/ethereum/web3.py,https://github.com/consensys/teku,ethereum,2,10.0,"While web3.py democratizes Ethereum development, Teku plays a crucial role in securing and scaling the network following the Merge, making it essential. Teku's focus on enterprise solutions has institutionalized Ethereum staking, which attracts institutional capital and stabilizes the network's economic model. In contrast, web3.py has a more limited impact, primarily serving the needs of Python developers rather than the broader Ethereum network."
2025-01-23T16:59:25.720Z,L1Juror13,https://github.com/erigontech/erigon,https://github.com/ethereum-lists/chains,ethereum,1,5.0,"Chains plays a crucial role in promoting ecosystem growth, while Erigon is essential for enhancing Ethereum’s functionality by facilitating efficient node operation and scalability. Erigon's technical improvements specifically tackle key challenges faced by Ethereum, including node accessibility and state bloat. In contrast, while Ethereum-Lists/Chains addresses coordination issues, it does not enhance the resilience of the protocol at the fundamental level."
2025-01-23T17:01:15.387Z,L1Juror13,https://github.com/ethers-io/ethers.js,https://github.com/argotorg/fe,ethereum,1,10.0,"Ethers.js directly enables millions of dApps, wallets, and tools, forming the backbone of Ethereum’s JavaScript ecosystem. Fe’s impact is theoretical and unproven."
2025-01-24T01:45:02.484Z,L1Juror17,https://github.com/grandinetech/grandine,https://github.com/status-im/nimbus-eth2,ethereum,2,5.0,"Nimbus-eth2 is indispensable to Ethereum’s decentralization and accessibility, while Grandine remains a supplementary option for high-performance scenarios. Nimbus-eth2’s lightweight architecture (1 GiB memory) enables low-cost hardware like Raspberry Pi to run nodes, democratizing participation and strengthening censorship resistance—a core Ethereum value."
2025-01-24T01:51:46.455Z,L1Juror17,https://github.com/sigp/lighthouse,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,1,10.0,"Lighthouse’s role in Ethereum’s operational survival, decentralization, and security dwarfs EthereumJS’s utility. The 10x importance ratio reflects Lighthouse’s irreplaceability as infrastructure versus EthereumJS’s supplementary developer tools. While both projects contribute to the ecosystem, Lighthouse’s impact on Ethereum’s core functionality is exponentially greater."
2025-01-24T02:18:48.528Z,L1Juror17,https://github.com/ethers-io/ethers.js,https://github.com/eth-infinitism/account-abstraction,ethereum,1,100.0,"Ethers.js is Ethereum’s present lifeline, while ERC-4337 is a future enabler. The 100x importance ratio reflects Ethers.js’s irreplaceable role in daily operations versus ERC-4337’s nascent, unproven utility. For Ethereum’s survival today, Ethers.js is indispensable; for its evolution tomorrow, ERC-4337 is optional."
2025-01-24T02:24:52.470Z,L1Juror17,https://github.com/eth-infinitism/account-abstraction,https://github.com/alloy-rs/alloy,ethereum,2,10.0,"Alloy secures Ethereum’s developer ecosystem. Without it, dApps, wallets, and infrastructure (e.g., Foundry) would collapse. ERC-4337, while transformative, remains optional for Ethereum’s current operations."
2025-01-24T02:32:09.269Z,L1Juror17,https://github.com/ethereum/remix-project,https://github.com/argotorg/solidity,ethereum,2,999.0,"Remix simplifies development but is non-essential. Developers can use CLI tools, Foundry, or other IDEs without impacting Ethereum’s functionality."
2025-01-24T02:41:06.537Z,L1Juror17,https://github.com/wevm/viem,https://github.com/vyperlang/vyper,ethereum,2,20.0,"vyperlang/vyper’s value far exceeds its current adoption rate. As Solidity’s only substantive alternative, Vyper ensures Ethereum has contingency plans against language-level vulnerabilities. Its security-centric design offers superior options for high-risk contracts. While wevm/viem enhances development efficiency, its tooling role can be substituted by other libraries, whereas Vyper’s role in ecosystem defense is irreplaceable."
2025-01-24T02:47:20.065Z,L1Juror17,https://github.com/sigp/lighthouse,https://github.com/consensys/teku,ethereum,1,1.5,Lighthouse’s importance to Ethereum’s consensus layer eclipses Teku’s due to its broader adoption.
2025-01-24T03:13:57.993Z,L1Juror17,https://github.com/prysmaticlabs/prysm,https://github.com/web3/web3.js,ethereum,1,100.0,"Prysm’s importance to Ethereum dwarfs Web3.js by orders of magnitude due to its protocol-critical role, irreplaceable function, and ongoing maintenance, whereas Web3.js has become obsolete."
2025-01-24T03:25:50.949Z,L1Juror17,https://github.com/ethereum/go-ethereum,https://github.com/nomicfoundation/hardhat,ethereum,1,50.0,Geth is core infrastructure ensuring Ethereum’s execution layer operates securely and efficiently. Geth’s dominance in node distribution (~43% of execution clients) makes its stability paramount. HardHat is a contract development tool while  Foundry’s rise has reduced its uniqueness.
2025-01-24T03:25:40.315Z,L1Juror17,https://github.com/nethermindeth/nethermind,https://github.com/nomicfoundation/hardhat,ethereum,1,50.0,Nethermind is core infrastructure ensuring Ethereum’s execution layer operates securely and efficiently. Nethermind's dominance in node distribution (~36% of execution clients) makes its stability paramount. HardHat is a contract development tool while Foundry’s rise has reduced its uniqueness.
2025-01-24T17:51:14.540Z,L1Juror18,https://github.com/sigp/lighthouse,https://github.com/argotorg/sourcify,ethereum,2,999.0,Makes smart contracts data accessible for anyone
2025-01-24T19:03:52.628Z,L1Juror1,https://github.com/erigontech/erigon,https://github.com/hyperledger/besu,ethereum,2,5.27,"Erigon and Besu are both execution clients. Today, Erigon is 3% of the network and Besu is 16%. We can also analyze their contributions to client diversity by looking at the Herfindahl index of execution clients with and without each one:

>>> def hh(l): return sum([x**2 for x in l]) / sum(l)**2
... 
>>> hh([43,36,16,3,2])
0.3414
>>> hh([43,36,16,2])
0.3618875544691253
>>> hh([43,36,3,2])
0.447562358276644

This suggests that Besu is 5.2x valuable toward decreasing the Herfindahl index. If we average the raw number (5.33x) and the Herfindahl contribution (5.2x), we get 5.27x.

Note that Erigon is also known to be significant inspiration for many design decisions in Reth. However, the spirit of the graph-based contribution evaluation approach is that any such indirect contributions should not be counted here, rather they should be treated as a separate edge in the graph from Erigon to Reth."
2025-01-24T19:17:57.066Z,L1Juror1,https://github.com/web3/web3.js,https://github.com/paradigmxyz/reth,ethereum,1,2.22,"Reth has a 2% market share in Ethereum execution clients. Using Herfindahl indices (0.341 with Reth, 0.355 without it), one can argue that Reth makes the staking client distribution 3.85% more decentralized. If we take this marginal contribution as a fraction of all marginal contributions, we get (0.0385 / (0.0385 + ...)) = 0.0410, ie. Reth is doing 4% of the work of improving client decentralization. Averaging these two, we give it a 3% contribution share.

web.js is a crucial library for the user interface layer; AI estimates it to have a 20% market share.

Intuitively, it feels like execution clients are ~3x more important than the web3 library: Ethereum cannot survive without the former, though the latter is still very important.

Hence the total score is 0.2 / 0.03 * 3 = 2.22 in web3.js's favor."
2025-01-24T19:20:19.601Z,L1Juror1,https://github.com/erigontech/erigon,https://github.com/ethereum/go-ethereum,ethereum,2,10.55,"Erigon and Geth are both execution clients. Their market shares are 3% and 43%.

We can evaluate their contributions to client diversity by comparing Herfindahl index of staking with and without them:

>>> def hh(l): return sum([x**2 for x in l]) / sum(l)**2
... 
>>> hh([43, 36, 16, 3, 2])
0.3414
>>> hh([43, 36, 16, 2])
0.3618875544691253
>>> hh([36, 16, 3, 2])
0.4816866728224069

This suggests Geth's contribution to decentralization is 6.8x greater than Erigon's. Meanwhile, by raw market share, Geth has 14.3x more usage. Averaging these two, we get 10.55x in Geth's favor."
2025-01-24T19:25:40.017Z,L1Juror1,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/ethers-io/ethers.js,ethereum,2,4.0,"EthereumJS is not used directly as an execution client to any significant extent, but it is used as a library in Truffle, Remix, light clients and other contexts. ethers.js is used by Hardhat, but is also used heavily by application frontends. In general, ethers.js is significantly more prominent."
2025-01-28T10:15:00.418Z,L1Juror6,https://github.com/wevm/viem,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,20.0,"Numerous application layer deverlopers rely on the safety standards set by openzeppelin contracts, thus, it's userbase is bigger than the viem one."
2025-01-28T10:15:30.931Z,L1Juror6,https://github.com/argotorg/fe,https://github.com/vyperlang/titanoboa,ethereum,2,1.0,Both represent improtant alternatives to solidity and deserve the same credits.
2025-01-28T10:16:09.031Z,L1Juror6,https://github.com/vyperlang/vyper,https://github.com/grandinetech/grandine,ethereum,2,2.0,Grandine as a CL client deserves slightly more credits than the vyper programming language.
2025-01-28T12:59:07.641Z,L1Juror20,https://github.com/vyperlang/vyper,https://github.com/ethers-io/ethers.js,ethereum,2,2.0,ethers.JS has done a lot to onboard and make it easy for new devs to interact with the chain
2025-01-28T12:59:37.537Z,L1Juror20,https://github.com/alloy-rs/alloy,https://github.com/consensys/teku,ethereum,2,5.0,teku is a client and they helped a lot with delivering the ethereum POS upgrade as well as secure the network
2025-01-28T13:00:05.871Z,L1Juror20,https://github.com/nomicfoundation/hardhat,https://github.com/prysmaticlabs/prysm,ethereum,2,5.0,prysm is a client and are vital to the secure functioning of ethereum and hence its success
2025-01-28T13:00:35.114Z,L1Juror20,https://github.com/hyperledger/besu,https://github.com/vyperlang/vyper,ethereum,1,5.0,"besu is a full execution client that secures ethereum and is used by RPC providers like infura, which is very important to ethereums success"
2025-01-31T17:18:22.757Z,L1Juror21,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/hyperledger-web3j/web3j,ethereum,2,2.0,"I think scaffold is probably the more widely applicable to devs because it's compatible with typescript frontends but web3j has more legacy, more downloads, etc which makes it more historically valuable to the success of Ethereum. That said I think there is more work to do on scaffold than web3j at this point so I don't think a large credit multiplier is justified. I'm putting in 2 which is lower than the ratio of downloads/watches/etc I use as indicators of adoption."
2025-01-31T17:24:38.933Z,L1Juror21,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethereum/py-evm,ethereum,2,4.0,"Py-EVM is lower level, more critical infrastructure with more adoption and impact than scaffold. I don't think it's the most widely used node software but it still definitely has had more impact. I'm giving a multiplier based on some average of the stars/watchers/contributors and being more essential to the function of the network."
2025-02-01T06:22:49.111Z,L1Juror22,https://github.com/prysmaticlabs/prysm,https://github.com/wevm/viem,ethereum,1,5.0,Hard choice. I am not familiar with the viem. Prysm was one of the first clients participated in the PoS upgrade and for some time after that it was the super majority client which signifies its importance in adopting new stakers that are important for the mainnet security. It also brought up and retained in Ethereum brilliant engineers.
2025-02-01T06:36:22.123Z,L1Juror22,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/nomicfoundation/hardhat,ethereum,2,2.0,Tools like hardhat are very important for developers on Ethereum and for Ethereum adoption. I am not familiar with the tool but at least their mainnet forking can be very useful!
2025-02-01T06:51:05.624Z,L1Juror22,https://github.com/sigp/lighthouse,https://github.com/chainsafe/lodestar,ethereum,1,2.0,Based on the client diversity we can conclude that Lighthouse has been more important for Ethereum. Lighthouse team also brought many brilliant talents to Ethereum R&D
2025-02-01T06:58:21.979Z,L1Juror22,https://github.com/sigp/lighthouse,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,1,2.0,"Lighthouse is one of the clients that took a key role in the Merge. According to the client diversity, this client implementation is used by at least 1/3 of stakers for a couple of years already. Client diversity and stakers adoption is very important for Ethereum security, likewise the dev tooling. Preference is to LH but not significant"
2025-02-03T15:30:05.000Z,L1Juror23,https://github.com/a16z/helios,https://github.com/argotorg/solidity,ethereum,2,4.0,Solidity is the battle proof language for smart contracts. I think it contribute to the success of Ethereum more.
2025-02-10T10:14:57.214Z,L1Juror6,https://github.com/nethereum/nethereum,https://github.com/prysmaticlabs/prysm,ethereum,2,2.0,"Prysm and Nethermind are both ethereum clients that are used by a significant portion of the network. While one operates on the CL and the other one on the EL, it's difficult to compare their criticality for Ethereum and therefore they deserve the same weight. Prysm has slighlt more usage, thus, prysm gets more credits, but Nethermind is also used by L2s, making it less clear."
2025-02-10T10:16:03.996Z,L1Juror6,https://github.com/grandinetech/grandine,https://github.com/vyperlang/titanoboa,ethereum,2,1.0,"While grandine is a minority client with little usage, titanoboa is more used and thus more critical to users of Ethereum."
2025-02-10T10:17:28.203Z,L1Juror6,https://github.com/nomicfoundation/hardhat,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,1,5.0,"While the openzeppelin-contracts provide an important foundation for secure smart contract development for many projects, even more rely on hardhat for software development. Thus, the multiplier for hard should be a higher than the one for openzeppelin contracts."
2025-02-10T10:19:39.512Z,L1Juror6,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/safe-global/safe-smart-account,ethereum,2,3.0,"Many individuals and project heavily rely on the reliability and security of safe-smart-account. A bug would potentially cost billions. On the other hand, the same can be said for openzeppelin-contracts that present the smart contract foundation for many project lauching on Ethereum. Still, the amount of money involved in safe wallets contributes to safe-global deserving a bigger multiplier."
2025-02-10T10:22:16.507Z,L1Juror6,https://github.com/erigontech/erigon,https://github.com/wevm/viem,ethereum,1,2.0,"Erigon is a widely used Ethereum execution client that focuses on being a great archive node, as compared to other clients such as Geth. This is a very important for Ethereum. Viem is a typescript abstraction for Ethereum that is also very important to many but less critical than a execution client."
2025-02-12T08:30:54.890Z,L1Juror25,https://github.com/ethers-io/ethers.js,https://github.com/paradigmxyz/reth,ethereum,2,30.0,"I've been using Ethers.js regularly, and there's no denying it's an incredibly useful tool. Since JavaScript and TypeScript are so popular, Ethers.js has secured an important place in that ecosystem. One thing I've noticed—though it might not be unique to Ethers.js—is that the jump from version 5 to version 6 involved some major changes. I often ran into implementation issues because of dependency problems.

On another note, Reth is also very useful as a high-performance execution client built with Rust. It's important to remember that having a variety of execution clients is crucial for decentralization. Although there are alternatives similar to Ethers.js, Reth is one of the newer implementations out there, and with features that you won't find in others like ExEx, I believe it offers both uniqueness and promising potential for the future."
2025-02-20T16:05:26.011Z,L1Juror15,https://github.com/wevm/viem,https://github.com/nomicfoundation/hardhat,ethereum,2,1.5,"Github numbers seem to match intuition on this one with a 2.6x multiplier in favor of hardhat.  Intuition suggests hardhat should be servicing a larger userbase than viem which is typescript focused as opposed to the more broad ""smart contracts"" focused.  Viem does have a truly impressively large number of dependent projects... so I've chosen a lower multiplier to try and capture this."
2025-02-20T16:08:00.121Z,L1Juror15,https://github.com/vyperlang/vyper,https://github.com/argotorg/fe,ethereum,2,2.0,"Very subjective here.  I have a negative historical view of Vyper.  But also fe has been in R&D forever and is currently unusable because they decided to rewrite a major core component.  Fe wins by a small margin because I believe that it will eventually be a solid tool given enough time to get to production, where-as I am skeptical that vyper can every be a robust production level tool."
2025-02-26T06:13:40.360Z,L1Juror25,https://github.com/sigp/lighthouse,https://github.com/ethereum/web3.py,ethereum,2,2.0,"I believe that web3.py is more than twice as valuable for Ethereum's success as Lighthouse is. Lighthouse is one of the most widely used consensus clients, while web3.py is a Python library for interacting with Ethereum. Although they can’t be directly compared, here are a few perspectives:

- GitHub Stars: As of February 2025, Lighthouse has 3.1k stars, while web3.py has 5.2k stars—making web3.py about 1.67 times larger in this regard.
- Subjective Perspective: web3.py is essentially the de facto standard among Python libraries, and since Python is one of the most popular programming languages, it’s an extremely important library. Lighthouse, along with Prysm, is one of the leading consensus clients. However, because diversity in consensus clients is very important, and every client should hold a certain position, Lighthouse is relatively less crucial.

Overall, I believe that web3.py is more than twice as valuable to Ethereum’s success compared to Lighthouse."
2025-03-01T02:25:04.715Z,L1Juror15,https://github.com/ethereum/py-evm,https://github.com/argotorg/sourcify,ethereum,2,2.5,"Github data says that py-evm should be more important but my intuition goes against this.  I think that py-evm used to be more important in helping foster knowledge about the EVM, but I think this role has been supplanted by the EEELs spec.  Sourcify however still feels relevant to the security infrastructure of Ethereum since smart contract source verification should remain important for the forseable future."
2025-03-01T02:26:27.301Z,L1Juror15,https://github.com/erigontech/erigon,https://github.com/alloy-rs/alloy,ethereum,1,4.0,"Erigon wins as it is the only Ethereum client that feels architecturally different than the others and in being a fully functional execution client is useful across the whole ecosytem.  Allow is a rust specific tool, and while quite important, it doesn't have nearly as broad a reach."
2025-03-01T04:24:15.931Z,L1Juror15,https://github.com/erigontech/erigon,https://github.com/hyperledger-web3j/web3j,ethereum,1,2.5,"Another that goes against github numbers.  Good libraries for Java seem quite important for Ethereum given that mobile development is going to depend on them, however, I view Erigon as being a very important client in our ecosystem due to it being the only execution layer client who's architecturally distinct from the other clients."
2025-03-01T07:14:47.140Z,L1Juror9,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/vyperlang/titanoboa,ethereum,1,100.0,"I find OZ contracts more important because the number of Solidity developers is significantly higher than that of Vyper in any given metric. I'd also argue that it's OZ that has taken Solidity this far: it starts with templates and continues with many security features, offering upgradability packages, access control, and helping to push for signing standards like ERC712. Without OZ, Solidity probably wouldn't have such dominance in the dev market."
2025-03-01T07:19:51.280Z,L1Juror9,https://github.com/consensys/teku,https://github.com/ethereum/web3.py,ethereum,2,10.0,"I think the Python community is relatively small compared to Rust/JavaScript, but still, arguably the biggest Python core package has a significant impact. I haven't seen as many other ""Python SDKs"" built on web3.py compared to the JavaScript ecosystem, but definitely, web3.py simplifies a lot for data scientists to read on-chain logs and conduct analysis in an easy language. Teku is a very important client, but it's in Java and doesn't provide as much help as a dependency compared to web3.py."
2025-03-01T07:23:49.752Z,L1Juror9,https://github.com/safe-global/safe-smart-account,https://github.com/paradigmxyz/reth,ethereum,2,8.0,"I think execution clients play a significant role in the success of the EVM. Reth is not as big in market share now, but it has been the primary client for L2 teams (provided by RaaS providers like Conduit) to scale execution speed, L2 gas limits, and so much more. If we consider L2 the ""success of Ethereum,"" then Reth is playing an increasingly important role in helping to scale Ethereum with L2 execution clients. 
On the other hand, I don't think EIP-4337 has gained significant traction yet; so far, there is no evidence that Account Abstraction (AA) has contributed anything to improve Ethereum. However, I do think sending the signal that Ethereum wants to build AA with a collaborative effort and has a clear roadmap for an anti-censorship future is important."
2025-03-01T07:31:41.353Z,L1Juror9,https://github.com/foundry-rs/foundry,https://github.com/paradigmxyz/reth,ethereum,1,20.0,"The same team is building them, and Reth is a very important client, especially with L2 teams. However, Foundry has single-handedly lifted the boundaries of contract development for everyone, not just in terms of speed (even though it's easily the most important metric), but developing contracts with a Solidity-only framework is a huge step. It removes a lot of friction in development by eliminating unnecessary JavaScript dependencies and syntax differences that you have to switch between during development. Foundry also plays a significant role in security; it helps us write fuzz tests and formal verification tools (Halos) with ease. It has made fork tests fast and effective, and it is one of the most important projects that has contributed massively to EVM. 
I consider Reth and L2 clients more like infrastructure work, and foundry bootstrap all the ""products"" (DApps) along with security researchers. The latter significantly outweighs the former in terms of impact."
2025-03-01T07:34:19.636Z,L1Juror9,https://github.com/ethereum/remix-project,https://github.com/prysmaticlabs/prysm,ethereum,2,10.0,"I think Prysm, as a consensus layer, is a lot more valuable because it's the second biggest consensus client today, while Remix is no longer anyone's favorite when it comes to either onboarding new people or real development."
2025-03-01T07:35:55.487Z,L1Juror9,https://github.com/ethereum-lists/chains,https://github.com/ethereum/web3.py,ethereum,2,10.0,"I believe web3.py is still more valuable given how most Python scripts, bots, and analysis tools might have used it, while the chainId list is like a tool that saves people's time but is not something we cannot live without."
2025-03-01T16:06:47.292Z,L1Juror15,https://github.com/grandinetech/grandine,https://github.com/chainsafe/lodestar,ethereum,1,2.0,I'm inclined to give this one to Grandine.  They are brand new and yet they seem to have more share on the network (by a very small margin) than lodestar.  Lodestar has existed for a long time with very little success in gaining usership.
2025-03-01T16:08:01.124Z,L1Juror15,https://github.com/consensys/teku,https://github.com/erigontech/erigon,ethereum,1,2.5,"Teku holds a solid share of the Consensus client share, while Erigon holds a very meager share of the execution side."
2025-03-01T23:45:15.947Z,L1Juror19,https://github.com/ethereum/web3.py,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,2,10.0,Ethereumjs powered hardhat which enabled devs to test their code
2025-03-01T23:45:47.006Z,L1Juror19,https://github.com/erigontech/erigon,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,1,100.0,"Erigon pioneered new node architecture, enabling nodes to run much more cheaply with smaller databases"
2025-03-01T23:46:01.328Z,L1Juror19,https://github.com/erigontech/erigon,https://github.com/ethereum/py-evm,ethereum,1,100.0,Erigon runs in production
2025-03-01T23:46:17.565Z,L1Juror19,https://github.com/safe-global/safe-smart-account,https://github.com/ethereum/go-ethereum,ethereum,2,1.0,"Without geth, Safe would not be able to exist"
2025-03-01T23:47:59.695Z,L1Juror19,https://github.com/paradigmxyz/reth,https://github.com/ethers-io/ethers.js,ethereum,1,2.0,"ethers historically was influential but did not keep up with the times, reth attracted new talent to ethereum core development"
2025-03-01T23:48:54.542Z,L1Juror19,https://github.com/ethereum/web3.py,https://github.com/ethereum/remix-project,ethereum,2,2.0,Remix was super important for developers who just wanted to test something out
2025-03-01T23:49:30.340Z,L1Juror19,https://github.com/alloy-rs/alloy,https://github.com/nethermindeth/nethermind,ethereum,2,3.0,"Nethermind has been around much longer. Both nethermind and alloy are influential, but nethermind has had a longer time to be influential"
2025-03-01T23:49:55.709Z,L1Juror19,https://github.com/ethereum/remix-project,https://github.com/vyperlang/titanoboa,ethereum,1,10.0,Remix was really important for devs to test out ideas quickly on ethereum
2025-03-12T02:22:05.162Z,L1Juror26,https://github.com/hyperledger/besu,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,2,2.0,"I will vote for Scaffold Eth 2 over Besu because it provides a practical toolkit for developers to easily build and test decentralized applications (dapps) on Ethereum.

While Besu is an important Ethereum client, Scaffold Eth 2 has more to offers helping Ethereum dapp development faster and more accessible."
2025-03-24T22:11:47.595Z,L1Juror27,https://github.com/ethers-io/ethers.js,https://github.com/hyperledger/besu,ethereum,1,5.0,"Ethers.js is a core tool for dApp development. It's used across front-end, mobile, and server environments to connect wallets, blockchains, and smart contracts. It serves as the interface layer for end-user experience—essentially a ""browser-level"" tool in the Web3 ecosystem. Developers, project teams, and everyday users all rely on Ether.js.
Besu, on the other hand, is a blockchain client/node software, mainly used for setting up or running a blockchain network. It's typically used only by a small number of enterprises, research institutions, or low-level protocol developers—ordinary developers and users rarely interact with it directly. While Besu is important, it's ""too far from the user"" and falls under infrastructure.
Market demand for Ethers.js is significantly greater than for Besu. There are about five other clients similar to Besu. Therefore, Ethers.js deserves five times the credit."
2025-03-24T22:29:31.253Z,L1Juror27,https://github.com/consensys/teku,https://github.com/hyperledger-web3j/web3j,ethereum,2,5.0,"web3j is an Ethereum client SDK written in Java and Android, designed to enable interaction with the Ethereum blockchain from Java applications. Its role is comparable to Ethers.js or Web3.js in the Java ecosystem. For Java developers, web3j is the primary tool for connecting to Ethereum, calling smart contracts, and sending transactions. It is especially a great choice for developers integrating Web3 into Android mobile applications.
Teku is a Java-based consensus client, currently holding around 27% of the Ethereum consensus client market share. As a part of Ethereum’s core infrastructure, Teku represents the important presence of Java in consensus-layer development. However, with the emergence of new consensus mechanisms and a growing number of client implementations, Teku’s share may gradually decline.
I still firmly believe that developer-facing tools are more important than Ethereum infrastructure clients. Execution and consensus clients are interchangeable within a multi-client ecosystem and are generally far removed from most developers and end users. In contrast, developer tools are used by all Web3 developers, and their functionality, iteration speed, completeness, and security have a direct and immediate impact on the developer experience."
2025-03-24T22:42:23.915Z,L1Juror27,https://github.com/sigp/lighthouse,https://github.com/safe-global/safe-smart-account,ethereum,2,5.0,"The Safe Smart Account is a developer-focused TypeScript SDK designed for building, managing, and operating smart contract accounts based on Safe + ERC-4337. It fully supports the Account Abstraction workflow and is considered one of the core tools for developing next-generation Web3 wallets.

Lighthouse is a high-performance, open-source Ethereum consensus client written in Rust, used to run Ethereum 2.0 (PoS) validator nodes. By running Lighthouse, users can participate in block validation, stake ETH, and help maintain Ethereum network consensus.

Lighthouse currently holds around 32% of the consensus client market share. As of January 2024, more than 100 projects have adopted the Safe Smart Account. Since security is always the top priority for Ethereum, the Safe Smart Account deserves 3× more credit than Lighthouse."
2025-03-24T22:46:32.827Z,L1Juror27,https://github.com/grandinetech/grandine,https://github.com/ethereum/go-ethereum,ethereum,2,22.0,"Go-Ethereum (Geth) is a mainstream execution client for Ethereum, officially maintained and written in Go. It handles transaction processing, smart contract execution, and block synchronization, making it one of the most widely used node software solutions on the Ethereum mainnet. Developers and users can use Geth to run full nodes, deploy private chains, or interact deeply with the Ethereum network.

Grandine is a lightweight Ethereum consensus client written in Rust, designed for performance and modularity. It follows the Ethereum Proof-of-Stake consensus protocol and works alongside execution clients like Geth or Nethermind to participate in block validation. Although it currently has low usage, it showcases a new direction and technical diversity in consensus client development.

Grandine holds approximately 1.94% of the consensus client market, while Geth accounts for 43% of execution clients. Therefore, Geth deserves 22 times more credit than Grandine."
2025-03-24T22:52:10.228Z,L1Juror27,https://github.com/consensys/teku,https://github.com/grandinetech/grandine,ethereum,1,28.0,"Teku is an Ethereum consensus client developed by ConsenSys and written in Java, supporting the operation of Ethereum 2.0 (PoS) validator nodes. It is specifically designed for enterprise-grade deployments, with a focus on stability, security, and spec compliance. Teku works in tandem with execution clients such as Geth or Besu to participate in block validation and maintain network consensus.

Grandine is a lightweight Ethereum consensus client written in Rust, optimized for performance and modular architecture. It follows the Ethereum PoS consensus protocol and operates alongside execution clients like Geth or Nethermind to validate blocks. While its usage is currently limited, it represents a new direction and technical diversity in consensus client implementations.

Currently, Teku holds a 27.28% share of the consensus client market, while Grandine holds 1.94%, making Teku’s market share approximately 14 times greater. Moreover, there are two Rust-based consensus clients, while Teku is the only Java-based consensus client. Therefore, Teku deserves 28 times more credit than Grandine."
2025-03-24T22:57:51.653Z,L1Juror27,https://github.com/ethereum/go-ethereum,https://github.com/ethereum/web3.py,ethereum,1,5.0,"Go-Ethereum (Geth) is the officially maintained and Go-based execution client for Ethereum. It handles transaction processing, smart contract execution, and block synchronization, making it one of the most widely used node software on the Ethereum mainnet. Developers and users can use Geth to run full nodes, deploy private chains, or deeply interact with the Ethereum network. It currently holds 43% of the market share, giving it a dominant position. Therefore, Geth's stability and security are critically important to Ethereum.

Web3.py is an Ethereum development library written in Python, and it is the most widely used Ethereum library in the Python ecosystem. It is commonly applied in data analysis, on-chain interaction, automation scripts, and research projects. Although smaller in scale compared to JavaScript-based tools like Ethers.js, it plays an important role in Web3 data engineering, backend services, and AI-related blockchain research.

Since Web3.py does not directly affect the operation or security of the Ethereum mainnet, its overall importance is considered lower than that of Geth."
2025-03-24T23:00:17.260Z,L1Juror27,https://github.com/sigp/lighthouse,https://github.com/nomicfoundation/hardhat,ethereum,2,5.0,"nomicfoundation/hardhat is a powerful Ethereum development environment and build toolchain. It supports Solidity compilation, contract deployment, automated testing, scripting, and local node simulation, making it one of the mainstream tools for modern smart contract development. Hardhat features a rich plugin system and integrates widely with Ethers.js, TypeScript, and front-end frameworks, making it ideal for professional Web3 dApp development workflows. Its application scope is broader and it is much closer to developers — thus, its importance is greater."
2025-03-24T23:03:40.270Z,L1Juror27,https://github.com/alloy-rs/alloy,https://github.com/argotorg/solidity,ethereum,2,5.0,"alloy-rs/alloy is a modular and modern Ethereum development toolkit written in Rust, designed to provide end-to-end Web3 development support for Rust developers. It includes core modules such as EVM encoding/decoding, RPC interfaces, ABI parsing, signature handling, and transaction construction. Alloy is quickly becoming one of the key tools for building Ethereum applications and protocols in the Rust ecosystem.

Solidity is the primary smart contract programming language on Ethereum, specifically designed for writing and deploying contracts on the EVM (Ethereum Virtual Machine). It is the core language behind the development of Web3 applications such as DeFi, NFTs, and DAOs, and has become the industry standard for blockchain smart contract development.

Solidity is widely regarded as the cornerstone of Ethereum development, playing a more central role than most other tools and languages."
2025-03-24T23:06:56.742Z,L1Juror27,https://github.com/grandinetech/grandine,https://github.com/scaffold-eth/scaffold-eth-2,ethereum,2,3.0,"scaffold-eth/scaffold-eth-2 is an Ethereum dApp development template designed for quickly building full-stack Web3 applications. It integrates core tools such as Viem, Next.js, RainbowKit, Ethers.js, and Hardhat, providing out-of-the-box support for contract compilation, deployment, front-end interaction, and wallet connectivity. As an upgraded version of Scaffold-ETH, Scaffold-ETH-2 is more modular, type-safe, and compatible with EVM chains, making it an efficient starting point for learning and building Web3 applications.
Based on the personal principle that the closer a tool is to developers, the more important it is, Scaffold-ETH-2 is more important than the consensus client Grandine — especially from an application development perspective."
2025-03-24T23:08:56.072Z,L1Juror27,https://github.com/safe-global/safe-smart-account,https://github.com/argotorg/fe,ethereum,1,10.0,"ethereum/fe is a new smart contract programming language called Fe (Ferrum), supported by the Ethereum Foundation and designed specifically for the Ethereum Virtual Machine (EVM). It draws inspiration from the syntax of Rust and Python, with a focus on security, simplicity, and predictability—making it a potential complement or alternative to Solidity. Compared to the widely adopted safe-global/safe-smart-account, its importance is significantly lower."
2025-03-30T04:17:04.680Z,L1Juror28,https://github.com/ethereumjs/ethereumjs-monorepo,https://github.com/vyperlang/titanoboa,ethereum,1,3.5,"Titanoboa is a Vyper interpreter that provides excellent debug/traceback/fork capabilities for Vyper users. I believe this goal is quite important, as it can attract more developers to Vyper, similar to what Foundry did for Solidity developers. However, ethereumjs is a complete implementation of the Ethereum protocol, including EVM and data structure implementations. It also serves as a reference benchmark for EIP testing. Therefore, considering the number of stars on the project and how ethereumjs influences implementations such as ethers.js/viem/metamask, I believe it has a greater impact, which is why I choose ethereumjs."
2025-03-30T04:19:32.173Z,L1Juror28,https://github.com/erigontech/erigon,https://github.com/ethereum/go-ethereum,ethereum,2,10.0,"Geth's code has been refined over many years, having gone through multiple fork upgrades. In terms of code quality and depth of consensus layer implementation, it has become a crucial learning and reference benchmark for developers. Simultaneously, many of its modules have been extracted to develop more node-related applications. Considering its influence and role as a reference implementation, I would choose Geth over Erigon."
2025-03-30T04:24:26.983Z,L1Juror28,https://github.com/ethereum-lists/chains,https://github.com/nethereum/nethereum,ethereum,2,2.0,"Chainid network is a great metadata collection page that makes it easy for users to obtain network information, but since it's only a data format, it can be easily replaced. Unless it has more interoperability-related standard definitions like CAIP and other standards. Nethereum is a library for the .NET platform, like Besu for Java. .NET and Java are languages traditionally adopted by industry. Therefore, from an enterprise application perspective, a .NET library can reach more users."
2025-03-30T04:34:06.299Z,L1Juror28,https://github.com/status-im/nimbus-eth2,https://github.com/chainsafe/lodestar,ethereum,1,2.0,"Nimbus and Lodestar are both CL clients. I would choose Nimbus based on the following points: it's friendly to light clients, the nodes are relatively stable, it outputs system metrics for observation, and it has a slightly higher market share. However, neither of them is a mainstream CL client."
2025-03-30T04:38:09.817Z,L1Juror28,https://github.com/paradigmxyz/reth,https://github.com/nethermindeth/nethermind,ethereum,1,7.5,"Reth is a complete Ethereum protocol implementation with many libraries or modules that can be extracted for implementing node applications, such as indexers/searchers. Nethereum is a library on the .NET platform, and although many industries use it, from a long-term perspective, Rust will be a relatively mainstream development tool. Therefore, in terms of tool richness and influence, I choose Reth."
2025-03-30T05:01:54.338Z,L1Juror28,https://github.com/argotorg/sourcify,https://github.com/consensys/teku,ethereum,2,5.0,"Sourcify provides contract verification and file consistency services, which are very important for ensuring contract security. Teku is a CL client developed in Java, which serves as a reference for Java developers, especially for use in the web2 industry (institutions/banks). Additionally, CL development requires keeping up with EIPs and specs, which is relatively tedious work. Therefore, I choose Teku."
2025-03-30T05:04:18.025Z,L1Juror28,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethereum-lists/chains,ethereum,1,8.0,"Scaffold-eth-2 provides a basic framework that allows dapp developers to quickly have a complete functional environment, especially common in hackathon competitions, serving as a frontend Swiss Army knife. As a one-stop development environment, scaffold-eth-2 is excellent foundational material and includes many web3 concepts such as ENS, wallets, contract interactions, etc. Compared to web3 packages, it helps more people understand Ethereum's development ecosystem. Chainid network is a great metadata collection page that makes it easy for users to obtain network information, but since it's only a data format, it can be easily replaced."
2025-03-30T05:09:59.940Z,L1Juror28,https://github.com/sigp/lighthouse,https://github.com/grandinetech/grandine,ethereum,1,10.0,"Lighthouse is a mainstream and more mature CL client, while Grandine is newer and is a high-performance light client. The two have somewhat different positioning. Lighthouse has been online for many years, safeguarding Ethereum POS security. However, light clients have their own positioning, especially in the current situation where service providers are still running clients. The evolution and emergence of light clients will bring greater decentralization and popularization. Considering the current situation, I choose Lighthouse due to its greater influence, but don't rule out that Grandine's importance may increase in the future."
2025-03-30T05:12:19.476Z,L1Juror28,https://github.com/paradigmxyz/reth,https://github.com/ethereum/remix-project,ethereum,1,5.0,"reth is a complete Ethereum protocol implementation with many libraries or modules that can be extracted for implementing node applications, such as indexers/searchers. The remix-project, as an early tool for contract developers, conveniently allows contract compilation/testing/operation on the web. Since there are currently many mature tools and packages available, compared to reth which enables developers to develop high-performance applications on the underlying protocol, I ultimately choose reth."
2025-03-30T05:15:03.086Z,L1Juror24,https://github.com/ethereum-lists/chains,https://github.com/ethereum/web3.py,ethereum,2,2.0,"chains list is usefule for some explorers, wallets or DApps but it is not a necessity to the ecosystem while web3.py helps many smart contract devs write in Python. Though more no python devs will probably find chains list more useful to them."
2025-03-30T05:16:06.551Z,L1Juror28,https://github.com/erigontech/erigon,https://github.com/foundry-rs/foundry,ethereum,2,20.0,"Foundry as a contract development framework provides many convenient tools, from testing tools, high-performance environment, friendly debuggers, contract calldata encoding tools, and provides a fork environment, greatly improving developers' experience from the previously inefficient truffle/hardhat environments. Erigon is an EL client. Considering that Erigon's adoption rate is not that high, although EL client implementation is quite important, there are other clients existing for diversity. Considering the convenience and influence that Foundry brings to contract developers, I choose Foundry."
2025-03-30T05:19:12.982Z,L1Juror24,https://github.com/status-im/nimbus-eth2,https://github.com/ethereum/remix-project,ethereum,1,2.0,Both are less popular choice in their respective categories but I'm biased as a dev who had used remix and I will choose nimbus over remix. Though I pick a rather small credit multiplier.
2025-03-30T05:21:23.473Z,L1Juror24,https://github.com/argotorg/solidity,https://github.com/eth-infinitism/account-abstraction,ethereum,1,5.0,"account-abstraction is super important for wallets and users but since it is currently written in solidity and is among so many projects built with solidity, I will definitely choose solidity over account-abstraction."
2025-03-30T05:45:07.269Z,L1Juror24,https://github.com/argotorg/sourcify,https://github.com/erigontech/erigon,ethereum,2,10.0,Erigon contributes to the multi-client security of Ethereum and has port many improvements back to go-ethereum while sourcify is also like the multi-client version of smart contract explorer but since it is rather new and small compared to Etherscan. I will choose Erigon over sourcify.
2025-03-30T07:14:16.531Z,L1Juror24,https://github.com/foundry-rs/foundry,https://github.com/ethereumjs/ethereumjs-monorepo,ethereum,2,3.0,Foundry is more performant and feature rich but ethereumjs is much older than Foundry. It has helped so many projects building out the web app which interact with smart contracts so I will choose ethereumjs over foundry.
2025-03-30T07:26:03.187Z,L1Juror24,https://github.com/sigp/lighthouse,https://github.com/nethereum/nethereum,ethereum,1,5.0,Lighthouse is the (second) most popular CL client while nethereum is the minority of EL client. They all contribute to the security of Ethereum and I set credit multiplier to 5 given their market share.
2025-03-30T07:19:50.366Z,L1Juror24,https://github.com/nethermindeth/nethermind,https://github.com/nethereum/nethereum,ethereum,1,10.0,Nethermind is the second most popular EL client while nethereum is less popular. The multiplier is set to 10 given their market shares.
2025-03-30T07:23:19.652Z,L1Juror24,https://github.com/alloy-rs/alloy,https://github.com/argotorg/sourcify,ethereum,1,5.0,alloy is a great tool for rust smart contract devs which more and more projects are building on. Sourcify contributes to the diversity of smart contracts explorer though its target audience is smaller than alloy.
2025-03-30T07:25:51.954Z,L1Juror24,https://github.com/consensys/teku,https://github.com/argotorg/sourcify,ethereum,1,20.0,Teku is the third most popular CL client which contributes no less security than Lighthouse or Prysm in my opinion. Sourcify contributes to the diversity of smart contracts explorer but it's significance is much smaller than Teku as clients are much more important than explorers.
2025-03-30T07:29:56.793Z,L1Juror24,https://github.com/wevm/viem,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,50.0,openzeppelin contracts help all smart contracts devs save time developing the same libraries and their quality is incomparable while viem serves mainly JS devs. I will choose openzeppelin contracts over viem and set the credit multiplier given their impact on the number of smart contract devs.
2025-03-30T21:17:32.819Z,L1Juror29,https://github.com/ethereum/go-ethereum,https://github.com/status-im/nimbus-eth2,ethereum,2,2.0,"Even though Geth is more broadly used, Nimbus is more aligned with decentralization goals, lowers the barrier to entry for solo stakers and diverse infrastructure, and provides technical simplicity in a world of increasingly heavy Ethereum clients."
2025-03-30T21:18:25.091Z,L1Juror29,https://github.com/consensys/teku,https://github.com/erigontech/erigon,ethereum,2,1.0,equally useful
2025-03-30T21:18:40.643Z,L1Juror29,https://github.com/ethers-io/ethers.js,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,1,4.0,ethers.js is more foundational
2025-03-30T21:19:41.644Z,L1Juror29,https://github.com/ethereum/remix-project,https://github.com/status-im/nimbus-eth2,ethereum,1,10.0,remix was key to onboarding a whole generation of solidity developers. nimbus has alternatives
2025-03-30T21:20:45.861Z,L1Juror29,https://github.com/vyperlang/titanoboa,https://github.com/consensys/teku,ethereum,2,3.0,Teku is essential to Ethereum’s secure operation and network diversity. Vyper is niche
2025-03-30T21:22:10.399Z,L1Juror29,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/alloy-rs/alloy,ethereum,2,5.0,"Alloy powers wallets, dApps, indexers, and backends with typed, fast, modular code - real world use cases. Scaffold is more of a prototyping tool."
2025-03-30T21:23:14.377Z,L1Juror29,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethers-io/ethers.js,ethereum,2,3.0,Ethers.js is long term code; Scaffold is for prototyping
2025-03-30T21:23:51.694Z,L1Juror29,https://github.com/ethereum/go-ethereum,https://github.com/consensys/teku,ethereum,1,10.0,Geth is the dominant Ethereum execution client!
2025-03-30T21:25:10.009Z,L1Juror29,https://github.com/safe-global/safe-smart-account,https://github.com/ethereum/web3.py,ethereum,2,2.0,"While Safe Smart Accounts are essential to multisig security and DAO operations, web3.py serves as the core Python bridge to Ethereum, powering a wide range of critical infrastructure — from bots to analytics — across the industry."
2025-03-30T21:26:03.371Z,L1Juror29,https://github.com/eth-infinitism/account-abstraction,https://github.com/chainsafe/lodestar,ethereum,1,2.0,Chain abstraction solves a lot of problems we couldn't seamlessly solve otherwise. There are alternatives to lodestar
2025-03-30T21:27:35.282Z,L1Juror29,https://github.com/argotorg/sourcify,https://github.com/nethereum/nethereum,ethereum,2,2.0,"Nethereum’s role in integrating Ethereum with the widely-used .NET ecosystem has a substantial impact on expanding the developer base and fostering innovation within the blockchain space. While Sourcify plays a crucial role in enhancing transparency and security through contract verification, the broader applicability and dependency on Nethereum within the .NET development community give it a slight edge in overall usefulness."
2025-03-31T16:32:48.675Z,L1Juror30,https://github.com/hyperledger/besu,https://github.com/ethereum/go-ethereum,ethereum,2,5.0,"The Geth is obviously more widely used than the Besu. I think it worth 2 times.

Moreover, Geth has a very long history. This worth 3 times.

Therefore, I prefer 2+3=5 times."
2025-05-26T10:17:36.379Z,L1Juror37,https://github.com/alloy-rs/alloy,https://github.com/ethereum/web3.py,ethereum,1,500.0,More and more developer use rust sdk
2025-05-26T10:19:21.409Z,L1Juror37,https://github.com/prysmaticlabs/prysm,https://github.com/ethereum/remix-project,ethereum,2,300.0,Better to new comer
2025-05-26T10:21:15.737Z,L1Juror5,https://github.com/consensys/teku,https://github.com/argotorg/solidity,ethereum,2,3.0,"Solidity is the most used language, teku is one of many CL clients"
2025-05-26T10:38:23.068Z,L1Juror5,https://github.com/hyperledger/besu,https://github.com/ethereum-lists/chains,ethereum,1,100.0,Besu is much more important (and a way more complicated piece of software)
2025-05-26T10:41:36.343Z,L1Juror5,https://github.com/ethereum-lists/chains,https://github.com/prysmaticlabs/prysm,ethereum,2,200.0,"As one of the main CL clients, prysm is much more valuable"
2025-05-26T11:45:04.944Z,L1Juror12,https://github.com/status-im/nimbus-eth2,https://github.com/prysmaticlabs/prysm,ethereum,2,2.0,"Prysm ~x5 usage, but Nimbus towards solo stakers and also improves client diversity, so halving that.

(I also personally run Nimbus to improve client diversity, so more impactful for me)"
2025-05-26T11:46:31.971Z,L1Juror12,https://github.com/nomicfoundation/hardhat,https://github.com/a16z/helios,ethereum,1,5.0,"Hardhat is a key component in many open source projects and has been for a long time

Helios is a newer kid on the block and qualitatively haven't heard of as much impact; it is also part of A16Z so less funding might be needed IMO"
2025-05-26T11:56:57.589Z,L1Juror12,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/nethermindeth/nethermind,ethereum,1,5.0,"Openzeppelin contracts impact massive, hard to underestimate

Nethermind very useful as alt to Geth

If both disappeared OZ would be way worse"
2025-05-26T11:58:23.351Z,L1Juror12,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/alloy-rs/alloy,ethereum,1,10.0,"Similar to before, OZ dwarfs impact

Can't really judge about x10 factor"
2025-05-26T14:18:57.110Z,L1Juror32,https://github.com/grandinetech/grandine,https://github.com/nethermindeth/nethermind,ethereum,2,30.0,"According to clientdiversity (https://clientdiversity.org/#why) nethermind has 38% share of EL; Grandine has 1.2% of CL. A simple comparison is worth 30 times more.

These roles are completely different and cannot be compared in general. It should also be noted that nethermind's oligopoly is not a good thing for Ethereum."
2025-05-26T14:50:49.744Z,L1Juror32,https://github.com/sigp/lighthouse,https://github.com/ethereum/go-ethereum,ethereum,2,1.0,"Both have about the same share of the EL/CL. If I had to say, Geth, which has a longer track record, would be more valuable.
https://clientdiversity.org/#why"
2025-05-30T15:15:56.772Z,L1Juror20,https://github.com/hyperledger-web3j/web3j,https://github.com/ethereum-lists/chains,ethereum,2,50.0,chainlist is very important to make sure we dont have collisions
2025-06-01T07:18:42.558Z,L1Juror4,https://github.com/foundry-rs/foundry,https://github.com/sigp/lighthouse,ethereum,2,25.0,"Lighthouse stems the load of about 1/3 of all consensus participants, serving a major role in securing the network and thus can be seen as significantly more valuable compared to Foundry"
2025-06-01T07:24:37.359Z,L1Juror4,https://github.com/status-im/nimbus-eth2,https://github.com/grandinetech/grandine,ethereum,1,10.0,"Both clients have minory CL client usage share among validators. Nimbus has been around since the early days of the beacon chain, is an implementation from scratch (Grandine re-used existing infra). Nimbus also serves low-powered devices particularly well."
2025-06-01T07:37:57.710Z,L1Juror4,https://github.com/ethereum/go-ethereum,https://github.com/nethermindeth/nethermind,ethereum,1,50.0,"Geth has been the backbone of Ethereum for a decade, has countless forks - and generated billions of value.
Nethermind wouldn't have been able without Geth, could piggyback and scale up its usage in the slipstream of Geth."
2025-06-01T07:39:19.536Z,L1Juror4,https://github.com/chainsafe/lodestar,https://github.com/a16z/helios,ethereum,1,5.0,"Lodestar - despite lower network penetration - is famous for best-in-class validator client interop and serves as lightweight and robust consensus client.
Helios as a light-client hasn't seem similar traction, but maybe will in the future"
2025-06-06T22:46:13.940Z,L1Juror31,https://github.com/vyperlang/titanoboa,https://github.com/ethers-io/ethers.js,ethereum,2,20.0,Ethers introduced important improvements into thinking about how javascript tooling could be improved.
2025-06-06T22:48:42.290Z,L1Juror31,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/argotorg/fe,ethereum,1,5.0,"It's so valuable to have go-to implementations of features and contracts. Fe is great, but for a specific subset of users that prefer Rust-like syntax."
2025-09-05T14:26:12.735Z,L1Juror35,https://github.com/prysmaticlabs/prysm,https://github.com/lambdaclass/lambda_ethereum_consensus,ethereum,1,5.0,Prysm has much more adoption afaik
2025-09-05T14:39:01.616Z,L1Juror35,https://github.com/argotorg/hevm,https://github.com/ethereum-lists/chains,ethereum,1,2.0,chain list is useful but also not critical tech in the way hevm is
2025-09-05T14:51:44.474Z,L1Juror35,https://github.com/ethereum/remix-project,https://github.com/ethpandaops/checkpointz,ethereum,1,2.0,Remix is important for dev onboarding and convenient
2025-09-05T14:53:00.963Z,L1Juror35,https://github.com/grandinetech/grandine,https://github.com/ethereum/eips,ethereum,2,10.0,EIPs keep ethereum omving forward
2025-09-05T19:40:16.601Z,L1Juror36,https://github.com/sigp/lighthouse,https://github.com/ethereum/execution-apis,ethereum,2,2.0,Cross-client reference APIs
2025-09-05T19:44:39.457Z,L1Juror36,https://github.com/hyperledger-web3j/web3j,https://github.com/argotorg/act,ethereum,1,100.0,Web3j has helped many projects and wallets ship on android
2025-09-06T17:56:40.212Z,L1Juror14,https://github.com/ethpandaops/ethereum-helm-charts,https://github.com/argotorg/solidity,ethereum,2,30.0,solidity is ethereum's moat and export
2025-09-06T17:57:12.062Z,L1Juror14,https://github.com/erigontech/silkworm,https://github.com/ethereum/remix-project,ethereum,2,10.0,remix is the hello world of many ETH devs
2025-09-06T18:01:50.951Z,L1Juror14,https://github.com/ethereum/py-evm,https://github.com/ethpandaops/ethereum-package,ethereum,2,2.0,required for safe testing of hardforks. the other has alternatives.
2025-09-06T18:04:05.896Z,L1Juror14,https://github.com/eth-infinitism/account-abstraction,https://github.com/lambdaclass/lambda_ethereum_consensus,ethereum,1,3.0,account abstraction ships more
2025-09-07T23:41:38.017Z,L1Juror26,https://github.com/ethpandaops/ethereum-package,https://github.com/ethereum/py-evm,ethereum,1,4.0,"ethereum-package is required for faster and more streamlined testing of upcoming upgrades. However, there are alternative implementations of the EVM specification available."
2025-09-07T23:20:34.183Z,L1Juror26,https://github.com/prysmaticlabs/prysm,https://github.com/erigontech/silkworm,ethereum,1,2.0,"Prysm has been a long-running CL client since the launch of the Beacon Chain in 2020. Silkworm, being relatively new, may need a few more years before contributing at the same level as the existing clients."
2025-09-07T23:31:02.189Z,L1Juror26,https://github.com/foundry-rs/foundry,https://github.com/hyperledger-web3j/web3j,ethereum,1,2.0,"Web3j has been a popular Java and Android library for long, whereas Foundry, as a portable and modular toolkit for Ethereum application development, could become a popular choice in the future."
2025-09-07T23:42:16.538Z,L1Juror26,https://github.com/erigontech/erigon,https://github.com/nethermindeth/nethermind,ethereum,2,2.0,"Both Erigon and Nethermind have been stable EL clients; however, Nethermind’s active engagement with the community has helped increase Ethereum’s popularity among upcoming protocol developers and users."
2025-09-08T11:17:44.857Z,L1Juror38,https://github.com/ethereum/consensus-specs,https://github.com/ethereum/go-ethereum,ethereum,2,20.0,geth is the most used client.
2025-09-08T11:24:16.254Z,L1Juror38,https://github.com/ethereum/execution-apis,https://github.com/foundry-rs/foundry,ethereum,2,10.0,one of the most used devtool.
2025-09-08T11:28:39.233Z,L1Juror38,https://github.com/ethpandaops/checkpointz,https://github.com/ethereum/execution-apis,ethereum,1,3.0,checkpointz useful for quickly setting up a node.
2025-09-08T11:30:58.892Z,L1Juror38,https://github.com/eth-infinitism/account-abstraction,https://github.com/ethereum/evmone,ethereum,1,5.0,account-abstraction is really important for eth getting more adoption.
2025-09-08T11:36:51.137Z,L1Juror38,https://github.com/foundry-rs/foundry,https://github.com/ethpandaops/ethereum-helm-charts,ethereum,2,5.0,For supporting Ethereum devops.
2025-09-08T17:05:34.912Z,L1Juror30,https://github.com/ethpandaops/ethereum-package,https://github.com/ethereum/evmone,ethereum,2,2.0,"Ethereum-package is proposed to setup a private Ethereum testnet. Evmome implement the C implementation of EVM.  I think both of them are important. But maybe Evmone make it easier  to implement a new version of Ethereum client. For example, Geth or other clients can use Evmone to create new one. This is good for the client diversity."
2025-09-08T17:08:39.291Z,L1Juror30,https://github.com/vyperlang/titanoboa,https://github.com/ethdebug/format,ethereum,1,2.0,"Vyper is a important language for Etheruem, since Curve is based on Vyper. Hence I  think the titanoboa (Vyper interpreter) is important and more valuable."
2025-09-08T17:11:06.845Z,L1Juror30,https://github.com/erigontech/silkworm,https://github.com/status-im/nimbus-eth2,ethereum,2,2.0,"They are both clients for Ethereum. Although they are not the most popular ones, they play a important role in Etheruem ecosystem. no matter they are EL or CL clients. I think they are both valueable. I measure their credits by the github starts."
2025-09-08T17:16:00.685Z,L1Juror30,https://github.com/nethereum/nethereum,https://github.com/argotorg/act,ethereum,1,5.0,Nethereum makes it easier to manage the nodes and contracts for Ethereum. Act is designed for formal verification. It is unfair to compare them. But I think Nethereum looks more useful. Hence it should be more valueable.
2025-09-09T20:19:42.307Z,L1Juror21,https://github.com/nethermindeth/nethermind,https://github.com/ethereum-lists/chains,ethereum,1,500.0,The amount of effort and engagement required to maintain an Ethereum client is at least an order of magnitude higher than a metadata webservice. People interested in using an L2 can generally get this metadata from the socials for the team running that L2 without this metadata so I give Nethermind another order of magnitude for it's relative significance.
2025-09-10T02:11:50.933Z,L1Juror11,https://github.com/nomicfoundation/hardhat,https://github.com/ethereum/execution-apis,ethereum,2,500.0,core protocol
2025-09-10T02:12:14.712Z,L1Juror11,https://github.com/erigontech/silkworm,https://github.com/consensys/teku,ethereum,2,200.0,client software
2025-09-10T02:12:31.076Z,L1Juror11,https://github.com/argotorg/fe,https://github.com/sigp/lighthouse,ethereum,2,500.0,core protocol
2025-03-01T23:48:31.564Z,L1Juror19,https://github.com/nethereum/nethereum,https://github.com/hyperledger-web3j/web3j,ethereum,2,2.0,web3j has more stars on github
2025-09-10T21:19:29.833Z,L1Juror33,https://github.com/argotorg/fe,https://github.com/a16z/helios,ethereum,1,6.0,Fe extends the development environment to more developers and enhances the experience which strengthens the network effect of Ethereum. Helios is one light client of many that helps a smaller portion of the userbase.
2025-09-10T21:21:52.276Z,L1Juror33,https://github.com/chainsafe/lodestar,https://github.com/ethereum/execution-apis,ethereum,2,2.0,The execution APIs have helped all client teams develop consistent and interoperable clients. Lodestar increases consensus client diversity while execution APIs ensures execution client diversity which is more important for Ethereum's stability.
2025-09-10T21:26:45.801Z,L1Juror33,https://github.com/ethereum/consensus-specs,https://github.com/argotorg/hevm,ethereum,1,20.0,The consensus specs help align all of Ethereum's consensus clients and ensures Ethereum's continued success via client diversity. hevm helps code be more resilient and tested but chain resiliency is far more important.
2025-09-11T19:20:13.899Z,L1Juror8,https://github.com/vyperlang/vyper,https://github.com/ethereum/evmone,ethereum,1,999.0,used by many popular dapps
2025-09-11T19:20:31.407Z,L1Juror8,https://github.com/ethereum/eips,https://github.com/ethdebug/format,ethereum,1,999.0,core gov infra
2025-09-11T19:21:23.649Z,L1Juror8,https://github.com/erigontech/silkworm,https://github.com/ethereum/evmone,ethereum,2,100.0,high perf EVM
2025-09-11T19:22:09.233Z,L1Juror8,https://github.com/vyperlang/titanoboa,https://github.com/ethereum/evmone,ethereum,1,100.0,good for tooling for popular dapps
2025-09-11T19:22:37.516Z,L1Juror8,https://github.com/eth-infinitism/account-abstraction,https://github.com/ethereum/go-ethereum,ethereum,2,999.0,its geth
2025-09-11T19:22:57.076Z,L1Juror8,https://github.com/ethpandaops/ethereum-package,https://github.com/hyperledger/besu,ethereum,1,999.0,core testing infra
2025-09-11T19:23:28.445Z,L1Juror8,https://github.com/ethereum/consensus-specs,https://github.com/ethereum/evmone,ethereum,1,999.0,ensures beacon chain owrks
2025-09-11T19:24:13.043Z,L1Juror8,https://github.com/consensys/teku,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,100.0,"hard to directly compare, but i'd say OZ given how much they help dapp ecosystem"
2025-09-11T19:24:23.507Z,L1Juror8,https://github.com/ethers-io/ethers.js,https://github.com/apeworx/ape,ethereum,1,500.0,great for making dapps
2025-09-11T19:24:50.165Z,L1Juror8,https://github.com/argotorg/fe,https://github.com/ethereum/execution-apis,ethereum,2,999.0,core protocl infra
2025-09-11T19:24:58.977Z,L1Juror8,https://github.com/status-im/nimbus-eth2,https://github.com/ethereum-lists/chains,ethereum,1,100.0,core CL impl
2025-09-11T19:25:38.635Z,L1Juror8,https://github.com/ethereum/eips,https://github.com/nomicfoundation/hardhat,ethereum,1,999.0,core gov infra
2025-09-11T19:25:56.760Z,L1Juror8,https://github.com/a16z/helios,https://github.com/ethers-io/ethers.js,ethereum,2,100.0,"good for making dapps, although helios has strong honorable mention"
2025-09-15T21:16:47.996Z,L1Juror21,https://github.com/ethpandaops/ethereum-package,https://github.com/nethermindeth/nethermind,ethereum,2,100.0,"Even if we were talking about Reth and not Nethermind I would start by assuming clients are more essential for funding than dev environments. Nethermind though is almost 40% of clients which gives it both importance and impact. The ecosystem will develop just fine without ethereum-package. It's an aid for client development, not even app development, but it's not essential."
2025-09-15T21:29:19.112Z,L1Juror21,https://github.com/consensys/teku,https://github.com/argotorg/sourcify,ethereum,1,4.0,"I'm always going to rate a client as higher impact than smart contract development tools. That said, sourcify has a great number of git stats such as commits and developers (more than Teku). I also went to the development backlog of sourcify and I'm impressed how robust the development seems to be. So I'm weighting sourcify highly in its category. I start with a 5:1 ratio on tools, I'm adjusting to 4:1 given the relative interest and work within the sourcify repo."
2025-09-23T07:31:14.350Z,L1Juror39,https://github.com/ethpandaops/ethereum-package,https://github.com/ethereum/eips,ethereum,2,500.0,"ethereum-package lied on the eip.
we can refer and make Ethereum spec by own hand."
2025-09-23T07:34:31.189Z,L1Juror39,https://github.com/ethereum/consensus-specs,https://github.com/hyperledger-web3j/web3j,ethereum,1,30.0,"web3j will be replaced by ethers and others, but the spec is one of a kind."
2025-09-23T07:37:31.744Z,L1Juror39,https://github.com/ethereum/eips,https://github.com/argotorg/solidity,ethereum,1,10.0,"Both are indispensable, but the former has a greater impact. Irreplaceable."
2025-09-23T07:40:20.092Z,L1Juror39,https://github.com/ethereum/web3.py,https://github.com/a16z/helios,ethereum,2,300.0,I have no opportunity to use Python libraries. Helios will continue to play an important role.
2025-09-23T07:45:05.830Z,L1Juror39,https://github.com/ethereum/execution-apis,https://github.com/hyperledger-web3j/web3j,ethereum,1,200.0,Such curation is important.
2025-09-23T11:40:55.185Z,L1Juror38,https://github.com/hyperledger-web3j/web3j,https://github.com/erigontech/silkworm,ethereum,2,3.0,silkworm is more a core dependency compared to web3j
2025-09-23T12:00:07.864Z,L1Juror38,https://github.com/safe-global/safe-smart-account,https://github.com/a16z/helios,ethereum,1,3.0,Important to develop smart account.
2025-09-23T12:11:15.203Z,L1Juror38,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/ethereum/py-evm,ethereum,1,3.0,scafold-eth important for educational purposes.
2025-09-23T12:13:49.567Z,L1Juror38,https://github.com/consensys/teku,https://github.com/vyperlang/vyper,ethereum,1,4.0,teku seems more used (and critica) than vyper so far.
2025-09-23T12:15:59.899Z,L1Juror38,https://github.com/ethereum/eips,https://github.com/ethereum/go-ethereum,ethereum,2,50.0,go-etherem has been the number 1 client for very long
2025-09-23T20:52:20.368Z,L1Juror21,https://github.com/status-im/nimbus-eth2,https://github.com/ethpandaops/ethereum-helm-charts,ethereum,1,10.0,Nimbus is the fourth largest consensus client. As a client that immediately gives it a funding premium compared to most other projects. In this case the other project is a Kubernetes+helm wrapper around nodes and tools. This is nice but it isn't nearly as complicated as a client as can be seen by the commits and lines of code nor is it as essential to ecosystem success. As a baseline I usually give a client a 3x multiple over ecosystem tooling. In this case I'm adding in higher weight due to the relative simplicity of the helm charts project and the fact that the helm charts for a tool can be funded by that tool rather than as a separate project.
2025-09-23T21:02:04.601Z,L1Juror21,https://github.com/apeworx/ape,https://github.com/erigontech/silkworm,ethereum,2,6.0,"Erigon is the fourth largest execution client. I generally give any client a 3x baseline multiple over any application layer tool. On top of this bias, Ape is not even Ethereum specific and it's language specific to Python both of which work against it from an impact/significance standpoint. Looking through the users of Ape I see Lido, Across, Synthetix, and others I both know of and respect but it's hard to say how critical to their success this specific dependency is, let alone how critical to Ethereum these specific apps are."
2025-09-23T21:09:01.206Z,L1Juror21,https://github.com/alloy-rs/alloy,https://github.com/argotorg/fe,ethereum,1,100.0,"Alloy is a code layer to interact with Ethereum rpc. Fe a competitor to Solidity or Vyper. Generally I would rate Alloy as being closer to the infrastructure and an EVM compiler as being closer to app layer. I haven't heard of Fe so I can't say they have had much impact on the success of Ethereum. I have however heard of ethers.rs and ethers.js. Alloy has over 2k users, there isn't even an equivalent stat for Fe so this is really no contest in favor of Alloy."
2025-09-23T21:16:42.683Z,L1Juror21,https://github.com/sigp/lighthouse,https://github.com/ethereum/py-evm,ethereum,1,999.0,Lighthouse is the most used Ethereum consensus client so very little is more valuable to the success of Ethereum as that. Py-evm apparently has also been archived and is now read-only so it shouldn't need more funding. This couldn't be more loaded in lighthouse favor.
2025-09-23T21:20:27.931Z,L1Juror21,https://github.com/argotorg/sourcify,https://github.com/erigontech/silkworm,ethereum,2,3.0,Erigon is an Ethereum consensus client and therefore comes with a baseline 3x multiple over app-layer tools like Sourcify despite the rather impressive usage stats Sourcify has.
2025-09-25T14:58:59.687Z,L1Juror40,https://github.com/ethers-io/ethers.js,https://github.com/hyperledger/besu,ethereum,1,10.0,"Ethers was extremely important for the adoption of Ethereum after about 2017. Web3js was successful at first, but Ethers really drove forward the state of the Ethereum on the frontend until it was largely superseded by Viem (which took an immense amount of inspiration from Ethers)."
2025-09-25T15:38:45.727Z,L1Juror40,https://github.com/argotorg/fe,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,2,5.0,OpenZeppelin has been a boon for the entire smart contract development ecosystem. It made safe smart contract development possible for a long time and continues to support that today.
2025-09-25T15:41:47.429Z,L1Juror40,https://github.com/ethereum/remix-project,https://github.com/safe-global/safe-smart-account,ethereum,1,2.0,"Remix was absolutely critical to the success of Ethereum at the beginning of Ethereum's existence and for several years after. Safe is probably more critical for Ethereum's continued success, but if considering retroactively, Remix's impact was so outsized in the early days that I still believe it deserves at least a 2x multiplier."
2025-09-25T15:51:51.277Z,L1Juror40,https://github.com/nomicfoundation/hardhat,https://github.com/prysmaticlabs/prysm,ethereum,1,2.0,"Before Hardhat, we had Truffle. Truffle was functional, but Hardhat made the development of more advanced smart contract systems far more viable and can easily be credited with a bump in what scale of contract systems were maintainable in the 2018-2022 era. Prysm provides more ongoing value today, but another team could have stepped up to build something like Prysm whereas only Hardhat stepped up to build beyond Truffle (and Foundry stepped up to build on the holes in Hardhat)."
2025-09-26T02:27:23.944Z,L1Juror40,https://github.com/erigontech/silkworm,https://github.com/argotorg/solidity,ethereum,2,500.0,Solidity is by far one of the most impactful Ethereum projects of all time. Silkworm is great but still in development. Solidity has had an astronomically higher impact than Silkworm on the ecosystem so far. I hope to see that change!
2025-09-26T02:29:58.096Z,L1Juror40,https://github.com/a16z/helios,https://github.com/wevm/viem,ethereum,2,50.0,"Viem is foundational software and most modern Ethereum front-end development runs on Viem. Helios is valuable for pushing forward the future of Ethereum, but Viem has been far more impactful on the success of Ethereum thus far."
2025-09-26T02:32:10.983Z,L1Juror40,https://github.com/ethereum/execution-apis,https://github.com/vyperlang/vyper,ethereum,2,5.0,"Tough! Ultimately I think Vyper has provided more value to Ethereum, mostly because it challenges and pushes Solidity forward (and because it was used by Uniswap V1)."
2025-09-26T02:34:06.069Z,L1Juror40,https://github.com/wevm/viem,https://github.com/hyperledger-web3j/web3j,ethereum,1,50.0,"Web3j is valuable for pushing Ethereum in spaces where it might not normally get a lot of use, especially in the enterprise world where Java is everywhere. Viem is simply too valuable to the front-end ecosystem and rightfully deserves at least 50x over."
2025-09-26T02:36:09.378Z,L1Juror40,https://github.com/openzeppelin/openzeppelin-contracts,https://github.com/vyperlang/vyper,ethereum,1,2.0,"Tough, realistically I think the OZ contracts have been a bigger part in Ethereum's success than Vyper. Many smart contracts wouldn't have been built, or would've been built worse if not for OZ."
2025-09-26T02:38:11.957Z,L1Juror40,https://github.com/ethereum/remix-project,https://github.com/argotorg/act,ethereum,1,50.0,Remix was fundamental to the early life of Ethereum and the current Solidity ecosystem would not be here without it.
2025-09-26T02:40:47.093Z,L1Juror40,https://github.com/erigontech/erigon,https://github.com/safe-global/safe-smart-account,ethereum,1,2.0,Erigon was the first client to really make it possible to build competitors to Etherscan. This was an important second-order effect and will be crucial to the continued success of Ethereum.
2025-09-26T02:42:30.257Z,L1Juror40,https://github.com/ethereum/go-ethereum,https://github.com/argotorg/act,ethereum,1,500.0,Geth was the client that carried Ethereum's success on its back for years.
2025-09-26T02:43:43.073Z,L1Juror40,https://github.com/ethereum/eips,https://github.com/ethereum/remix-project,ethereum,1,10.0,"Remix made Solidity development possible early on, EIP process is still too fundamental to the ecosystem to not reward more heavily."
2025-09-26T02:45:58.506Z,L1Juror40,https://github.com/ethereum/py-evm,https://github.com/ethers-io/ethers.js,ethereum,2,5.0,"Tough, Py EVM was always a good resource for understanding how the EVM works but realistically Ethers had more impact on the success of the ecosystem after 2017."
2025-09-26T02:57:53.694Z,L1Juror26,https://github.com/hyperledger-web3j/web3j,https://github.com/ethpandaops/ethereum-package,ethereum,2,10.0,"For Ethereum’s actual protocol and infrastructure success, ethpandaops/ethereum-package has been far more directly valuable.  hyperledger-web3j/web3j is also important but it doesn’t directly affect the functioning or testing of the Ethereum network itself."
2025-09-26T03:03:35.579Z,L1Juror26,https://github.com/ethpandaops/ethereum-package,https://github.com/erigontech/erigon,ethereum,1,4.0,"ethereum-package is valuable for infrastructure teams, but Erigon is a core client—without clients like Erigon, the network itself couldn’t run but there are other options of execution clients for node running like Nethermind, Geth, Besu, Reth."
2025-09-26T03:07:37.546Z,L1Juror26,https://github.com/prysmaticlabs/prysm,https://github.com/ethereum/go-ethereum,ethereum,2,2.0,"I find both equally important for the success of the Ethereum network. However, Geth being around for longer has more contribution than Prysm in the success of the Ethereum."
2025-09-26T03:11:19.297Z,L1Juror26,https://github.com/nethereum/nethereum,https://github.com/chainsafe/lodestar,ethereum,2,5.0,"In my opinion, chainsafe/lodestar has been more directly valuable. Lodestar is part of the infrastructure that keeps the Ethereum network alive and decentralized, whereas Nethereum mainly serves as an interface library for a subset of developers."
2025-09-26T03:16:20.487Z,L1Juror26,https://github.com/ethereum/execution-apis,https://github.com/openzeppelin/openzeppelin-contracts,ethereum,1,5.0,"It's a tough one, for Ethereum’s core protocol success, ethereum/execution-apis is more directly critical. However, for ecosystem adoption and developer success, openzeppelin/openzeppelin-contracts has the broader impact. But since without Ethereum protocol, contracts will not have much value for Ethereum, I vote for execution-apis"
2025-09-27T02:42:28.794Z,L1Juror12,https://github.com/ethereum/web3.py,https://github.com/ethereum/evmone,ethereum,1,5.0,"Core building block, older and more usage. Not familiar with evmone in detail, but x10 contributors x5 stars so x5 seems reasonable."
2025-09-27T02:44:58.981Z,L1Juror12,https://github.com/erigontech/erigon,https://github.com/ethereum/remix-project,ethereum,1,3.0,Erigon pushed a lot of perf work to Geth and no substitute; Remix historical value but there are/were also alternatives like Embark.
2025-09-27T02:46:40.559Z,L1Juror12,https://github.com/status-im/nimbus-eth2,https://github.com/ethpandaops/ethereum-helm-charts,ethereum,1,10.0,"Nimbus core infra and nice niche, client diversity with completely diff tech stack. Not familiar with helm-charts but seems marginal and not that special?"
2025-09-27T02:48:54.524Z,L1Juror12,https://github.com/ethereum/execution-apis,https://github.com/argotorg/solidity,ethereum,2,10.0,"Without Solidity...

Capping at x10"
2025-09-27T02:51:31.600Z,L1Juror12,https://github.com/scaffold-eth/scaffold-eth-2,https://github.com/hyperledger-web3j/web3j,ethereum,2,2.0,"I guess there are multiple scaffold repos... both very useful for devs but diff target

Web3j seems more singular in its role in Java/Enterprise world, so slight edge"
2025-09-27T02:52:58.366Z,L1Juror12,https://github.com/ethereum/go-ethereum,https://github.com/foundry-rs/foundry,ethereum,1,10.0,"Foundry is really cool and useful tooling, but Geth is singular, hard to compare"
2025-09-27T02:54:50.475Z,L1Juror12,https://github.com/ethdebug/format,https://github.com/vyperlang/vyper,ethereum,2,5.0,"Not familiar in detail with format, Vyper pushed the envelope"
2025-09-27T02:55:52.017Z,L1Juror12,https://github.com/vyperlang/titanoboa,https://github.com/ethpandaops/ethereum-helm-charts,ethereum,1,2.0,"Don't know, Vyper interpreter seems more useful?"
